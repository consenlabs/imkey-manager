// source: btc.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf')
var goog = jspb
var global = Function('return this')()

goog.exportSymbol('proto.btcapi.BtcAddressReq', null, global)
goog.exportSymbol('proto.btcapi.BtcAddressRes', null, global)
goog.exportSymbol('proto.btcapi.BtcSegwitTxReq', null, global)
goog.exportSymbol('proto.btcapi.BtcSegwitTxRes', null, global)
goog.exportSymbol('proto.btcapi.BtcTxReq', null, global)
goog.exportSymbol('proto.btcapi.BtcTxRes', null, global)
goog.exportSymbol('proto.btcapi.BtcXpubReq', null, global)
goog.exportSymbol('proto.btcapi.BtcXpubRes', null, global)
goog.exportSymbol('proto.btcapi.Utxo', null, global)
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.btcapi.Utxo = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.btcapi.Utxo, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.btcapi.Utxo.displayName = 'proto.btcapi.Utxo'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.btcapi.BtcTxReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.btcapi.BtcTxReq.repeatedFields_, null)
}
goog.inherits(proto.btcapi.BtcTxReq, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.btcapi.BtcTxReq.displayName = 'proto.btcapi.BtcTxReq'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.btcapi.BtcTxRes = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.btcapi.BtcTxRes, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.btcapi.BtcTxRes.displayName = 'proto.btcapi.BtcTxRes'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.btcapi.BtcSegwitTxReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.btcapi.BtcSegwitTxReq.repeatedFields_, null)
}
goog.inherits(proto.btcapi.BtcSegwitTxReq, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.btcapi.BtcSegwitTxReq.displayName = 'proto.btcapi.BtcSegwitTxReq'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.btcapi.BtcSegwitTxRes = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.btcapi.BtcSegwitTxRes, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.btcapi.BtcSegwitTxRes.displayName = 'proto.btcapi.BtcSegwitTxRes'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.btcapi.BtcXpubReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.btcapi.BtcXpubReq, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.btcapi.BtcXpubReq.displayName = 'proto.btcapi.BtcXpubReq'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.btcapi.BtcXpubRes = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.btcapi.BtcXpubRes, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.btcapi.BtcXpubRes.displayName = 'proto.btcapi.BtcXpubRes'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.btcapi.BtcAddressReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.btcapi.BtcAddressReq, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.btcapi.BtcAddressReq.displayName = 'proto.btcapi.BtcAddressReq'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.btcapi.BtcAddressRes = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.btcapi.BtcAddressRes, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.btcapi.BtcAddressRes.displayName = 'proto.btcapi.BtcAddressRes'
}

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.btcapi.Utxo.prototype.toObject = function (opt_includeInstance) {
    return proto.btcapi.Utxo.toObject(opt_includeInstance, this)
  }

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.btcapi.Utxo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.btcapi.Utxo.toObject = function (includeInstance, msg) {
    var f, obj = {
      txHash: jspb.Message.getFieldWithDefault(msg, 1, ''),
      vout: jspb.Message.getFieldWithDefault(msg, 2, 0),
      amount: jspb.Message.getFieldWithDefault(msg, 3, 0),
      address: jspb.Message.getFieldWithDefault(msg, 4, ''),
      scriptPubkey: jspb.Message.getFieldWithDefault(msg, 5, ''),
      derivedPath: jspb.Message.getFieldWithDefault(msg, 6, ''),
      sequence: jspb.Message.getFieldWithDefault(msg, 7, 0)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.btcapi.Utxo}
 */
proto.btcapi.Utxo.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.btcapi.Utxo()
  return proto.btcapi.Utxo.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.btcapi.Utxo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.btcapi.Utxo}
 */
proto.btcapi.Utxo.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setTxHash(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setVout(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readInt64())
        msg.setAmount(value)
        break
      case 4:
        var value = /** @type {string} */ (reader.readString())
        msg.setAddress(value)
        break
      case 5:
        var value = /** @type {string} */ (reader.readString())
        msg.setScriptPubkey(value)
        break
      case 6:
        var value = /** @type {string} */ (reader.readString())
        msg.setDerivedPath(value)
        break
      case 7:
        var value = /** @type {number} */ (reader.readInt64())
        msg.setSequence(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.btcapi.Utxo.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.btcapi.Utxo.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.btcapi.Utxo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.btcapi.Utxo.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getTxHash()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
  f = message.getVout()
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    )
  }
  f = message.getAmount()
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    )
  }
  f = message.getAddress()
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    )
  }
  f = message.getScriptPubkey()
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    )
  }
  f = message.getDerivedPath()
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    )
  }
  f = message.getSequence()
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    )
  }
}

/**
 * optional string tx_hash = 1;
 * @return {string}
 */
proto.btcapi.Utxo.prototype.getTxHash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.btcapi.Utxo} returns this
 */
proto.btcapi.Utxo.prototype.setTxHash = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional int32 vout = 2;
 * @return {number}
 */
proto.btcapi.Utxo.prototype.getVout = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}

/**
 * @param {number} value
 * @return {!proto.btcapi.Utxo} returns this
 */
proto.btcapi.Utxo.prototype.setVout = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value)
}

/**
 * optional int64 amount = 3;
 * @return {number}
 */
proto.btcapi.Utxo.prototype.getAmount = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}

/**
 * @param {number} value
 * @return {!proto.btcapi.Utxo} returns this
 */
proto.btcapi.Utxo.prototype.setAmount = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value)
}

/**
 * optional string address = 4;
 * @return {string}
 */
proto.btcapi.Utxo.prototype.getAddress = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''))
}

/**
 * @param {string} value
 * @return {!proto.btcapi.Utxo} returns this
 */
proto.btcapi.Utxo.prototype.setAddress = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value)
}

/**
 * optional string script_pubKey = 5;
 * @return {string}
 */
proto.btcapi.Utxo.prototype.getScriptPubkey = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''))
}

/**
 * @param {string} value
 * @return {!proto.btcapi.Utxo} returns this
 */
proto.btcapi.Utxo.prototype.setScriptPubkey = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value)
}

/**
 * optional string derived_path = 6;
 * @return {string}
 */
proto.btcapi.Utxo.prototype.getDerivedPath = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''))
}

/**
 * @param {string} value
 * @return {!proto.btcapi.Utxo} returns this
 */
proto.btcapi.Utxo.prototype.setDerivedPath = function (value) {
  return jspb.Message.setProto3StringField(this, 6, value)
}

/**
 * optional int64 sequence = 7;
 * @return {number}
 */
proto.btcapi.Utxo.prototype.getSequence = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0))
}

/**
 * @param {number} value
 * @return {!proto.btcapi.Utxo} returns this
 */
proto.btcapi.Utxo.prototype.setSequence = function (value) {
  return jspb.Message.setProto3IntField(this, 7, value)
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.btcapi.BtcTxReq.repeatedFields_ = [5]

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.btcapi.BtcTxReq.prototype.toObject = function (opt_includeInstance) {
    return proto.btcapi.BtcTxReq.toObject(opt_includeInstance, this)
  }

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.btcapi.BtcTxReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.btcapi.BtcTxReq.toObject = function (includeInstance, msg) {
    var f, obj = {
      to: jspb.Message.getFieldWithDefault(msg, 1, ''),
      amount: jspb.Message.getFieldWithDefault(msg, 2, 0),
      fee: jspb.Message.getFieldWithDefault(msg, 3, 0),
      changeAddressIndex: jspb.Message.getFieldWithDefault(msg, 4, 0),
      unspentsList: jspb.Message.toObjectList(msg.getUnspentsList(),
        proto.btcapi.Utxo.toObject, includeInstance),
      extraData: msg.getExtraData_asB64(),
      propertyId: jspb.Message.getFieldWithDefault(msg, 7, 0),
      network: jspb.Message.getFieldWithDefault(msg, 8, ''),
      pathPrefix: jspb.Message.getFieldWithDefault(msg, 9, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.btcapi.BtcTxReq}
 */
proto.btcapi.BtcTxReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.btcapi.BtcTxReq()
  return proto.btcapi.BtcTxReq.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.btcapi.BtcTxReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.btcapi.BtcTxReq}
 */
proto.btcapi.BtcTxReq.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setTo(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readInt64())
        msg.setAmount(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readInt64())
        msg.setFee(value)
        break
      case 4:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setChangeAddressIndex(value)
        break
      case 5:
        var value = new proto.btcapi.Utxo()
        reader.readMessage(value, proto.btcapi.Utxo.deserializeBinaryFromReader)
        msg.addUnspents(value)
        break
      case 6:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.setExtraData(value)
        break
      case 7:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setPropertyId(value)
        break
      case 8:
        var value = /** @type {string} */ (reader.readString())
        msg.setNetwork(value)
        break
      case 9:
        var value = /** @type {string} */ (reader.readString())
        msg.setPathPrefix(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.btcapi.BtcTxReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.btcapi.BtcTxReq.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.btcapi.BtcTxReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.btcapi.BtcTxReq.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getTo()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
  f = message.getAmount()
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    )
  }
  f = message.getFee()
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    )
  }
  f = message.getChangeAddressIndex()
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    )
  }
  f = message.getUnspentsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.btcapi.Utxo.serializeBinaryToWriter
    )
  }
  f = message.getExtraData_asU8()
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    )
  }
  f = message.getPropertyId()
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    )
  }
  f = message.getNetwork()
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    )
  }
  f = message.getPathPrefix()
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    )
  }
}

/**
 * optional string to = 1;
 * @return {string}
 */
proto.btcapi.BtcTxReq.prototype.getTo = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.btcapi.BtcTxReq} returns this
 */
proto.btcapi.BtcTxReq.prototype.setTo = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional int64 amount = 2;
 * @return {number}
 */
proto.btcapi.BtcTxReq.prototype.getAmount = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}

/**
 * @param {number} value
 * @return {!proto.btcapi.BtcTxReq} returns this
 */
proto.btcapi.BtcTxReq.prototype.setAmount = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value)
}

/**
 * optional int64 fee = 3;
 * @return {number}
 */
proto.btcapi.BtcTxReq.prototype.getFee = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}

/**
 * @param {number} value
 * @return {!proto.btcapi.BtcTxReq} returns this
 */
proto.btcapi.BtcTxReq.prototype.setFee = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value)
}

/**
 * optional uint32 change_address_index = 4;
 * @return {number}
 */
proto.btcapi.BtcTxReq.prototype.getChangeAddressIndex = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
}

/**
 * @param {number} value
 * @return {!proto.btcapi.BtcTxReq} returns this
 */
proto.btcapi.BtcTxReq.prototype.setChangeAddressIndex = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value)
}

/**
 * repeated Utxo unspents = 5;
 * @return {!Array<!proto.btcapi.Utxo>}
 */
proto.btcapi.BtcTxReq.prototype.getUnspentsList = function () {
  return /** @type{!Array<!proto.btcapi.Utxo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.btcapi.Utxo, 5))
}

/**
 * @param {!Array<!proto.btcapi.Utxo>} value
 * @return {!proto.btcapi.BtcTxReq} returns this
*/
proto.btcapi.BtcTxReq.prototype.setUnspentsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value)
}

/**
 * @param {!proto.btcapi.Utxo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.btcapi.Utxo}
 */
proto.btcapi.BtcTxReq.prototype.addUnspents = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.btcapi.Utxo, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.btcapi.BtcTxReq} returns this
 */
proto.btcapi.BtcTxReq.prototype.clearUnspentsList = function () {
  return this.setUnspentsList([])
}

/**
 * optional bytes extra_data = 6;
 * @return {!(string|Uint8Array)}
 */
proto.btcapi.BtcTxReq.prototype.getExtraData = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ''))
}

/**
 * optional bytes extra_data = 6;
 * This is a type-conversion wrapper around `getExtraData()`
 * @return {string}
 */
proto.btcapi.BtcTxReq.prototype.getExtraData_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getExtraData()))
}

/**
 * optional bytes extra_data = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExtraData()`
 * @return {!Uint8Array}
 */
proto.btcapi.BtcTxReq.prototype.getExtraData_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getExtraData()))
}

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.btcapi.BtcTxReq} returns this
 */
proto.btcapi.BtcTxReq.prototype.setExtraData = function (value) {
  return jspb.Message.setProto3BytesField(this, 6, value)
}

/**
 * optional int32 property_id = 7;
 * @return {number}
 */
proto.btcapi.BtcTxReq.prototype.getPropertyId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0))
}

/**
 * @param {number} value
 * @return {!proto.btcapi.BtcTxReq} returns this
 */
proto.btcapi.BtcTxReq.prototype.setPropertyId = function (value) {
  return jspb.Message.setProto3IntField(this, 7, value)
}

/**
 * optional string network = 8;
 * @return {string}
 */
proto.btcapi.BtcTxReq.prototype.getNetwork = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ''))
}

/**
 * @param {string} value
 * @return {!proto.btcapi.BtcTxReq} returns this
 */
proto.btcapi.BtcTxReq.prototype.setNetwork = function (value) {
  return jspb.Message.setProto3StringField(this, 8, value)
}

/**
 * optional string path_prefix = 9;
 * @return {string}
 */
proto.btcapi.BtcTxReq.prototype.getPathPrefix = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ''))
}

/**
 * @param {string} value
 * @return {!proto.btcapi.BtcTxReq} returns this
 */
proto.btcapi.BtcTxReq.prototype.setPathPrefix = function (value) {
  return jspb.Message.setProto3StringField(this, 9, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.btcapi.BtcTxRes.prototype.toObject = function (opt_includeInstance) {
    return proto.btcapi.BtcTxRes.toObject(opt_includeInstance, this)
  }

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.btcapi.BtcTxRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.btcapi.BtcTxRes.toObject = function (includeInstance, msg) {
    var f, obj = {
      txData: jspb.Message.getFieldWithDefault(msg, 1, ''),
      txHash: jspb.Message.getFieldWithDefault(msg, 2, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.btcapi.BtcTxRes}
 */
proto.btcapi.BtcTxRes.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.btcapi.BtcTxRes()
  return proto.btcapi.BtcTxRes.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.btcapi.BtcTxRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.btcapi.BtcTxRes}
 */
proto.btcapi.BtcTxRes.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setTxData(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setTxHash(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.btcapi.BtcTxRes.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.btcapi.BtcTxRes.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.btcapi.BtcTxRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.btcapi.BtcTxRes.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getTxData()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
  f = message.getTxHash()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
}

/**
 * optional string tx_data = 1;
 * @return {string}
 */
proto.btcapi.BtcTxRes.prototype.getTxData = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.btcapi.BtcTxRes} returns this
 */
proto.btcapi.BtcTxRes.prototype.setTxData = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string tx_hash = 2;
 * @return {string}
 */
proto.btcapi.BtcTxRes.prototype.getTxHash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.btcapi.BtcTxRes} returns this
 */
proto.btcapi.BtcTxRes.prototype.setTxHash = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.btcapi.BtcSegwitTxReq.repeatedFields_ = [5]

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.btcapi.BtcSegwitTxReq.prototype.toObject = function (opt_includeInstance) {
    return proto.btcapi.BtcSegwitTxReq.toObject(opt_includeInstance, this)
  }

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.btcapi.BtcSegwitTxReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.btcapi.BtcSegwitTxReq.toObject = function (includeInstance, msg) {
    var f, obj = {
      to: jspb.Message.getFieldWithDefault(msg, 1, ''),
      amount: jspb.Message.getFieldWithDefault(msg, 2, 0),
      fee: jspb.Message.getFieldWithDefault(msg, 3, 0),
      changeAddressIndex: jspb.Message.getFieldWithDefault(msg, 4, 0),
      unspentsList: jspb.Message.toObjectList(msg.getUnspentsList(),
        proto.btcapi.Utxo.toObject, includeInstance),
      extraData: msg.getExtraData_asB64(),
      propertyId: jspb.Message.getFieldWithDefault(msg, 7, 0),
      network: jspb.Message.getFieldWithDefault(msg, 8, ''),
      pathPrefix: jspb.Message.getFieldWithDefault(msg, 9, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.btcapi.BtcSegwitTxReq}
 */
proto.btcapi.BtcSegwitTxReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.btcapi.BtcSegwitTxReq()
  return proto.btcapi.BtcSegwitTxReq.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.btcapi.BtcSegwitTxReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.btcapi.BtcSegwitTxReq}
 */
proto.btcapi.BtcSegwitTxReq.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setTo(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readInt64())
        msg.setAmount(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readInt64())
        msg.setFee(value)
        break
      case 4:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setChangeAddressIndex(value)
        break
      case 5:
        var value = new proto.btcapi.Utxo()
        reader.readMessage(value, proto.btcapi.Utxo.deserializeBinaryFromReader)
        msg.addUnspents(value)
        break
      case 6:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.setExtraData(value)
        break
      case 7:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setPropertyId(value)
        break
      case 8:
        var value = /** @type {string} */ (reader.readString())
        msg.setNetwork(value)
        break
      case 9:
        var value = /** @type {string} */ (reader.readString())
        msg.setPathPrefix(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.btcapi.BtcSegwitTxReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.btcapi.BtcSegwitTxReq.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.btcapi.BtcSegwitTxReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.btcapi.BtcSegwitTxReq.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getTo()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
  f = message.getAmount()
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    )
  }
  f = message.getFee()
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    )
  }
  f = message.getChangeAddressIndex()
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    )
  }
  f = message.getUnspentsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.btcapi.Utxo.serializeBinaryToWriter
    )
  }
  f = message.getExtraData_asU8()
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    )
  }
  f = message.getPropertyId()
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    )
  }
  f = message.getNetwork()
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    )
  }
  f = message.getPathPrefix()
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    )
  }
}

/**
 * optional string to = 1;
 * @return {string}
 */
proto.btcapi.BtcSegwitTxReq.prototype.getTo = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.btcapi.BtcSegwitTxReq} returns this
 */
proto.btcapi.BtcSegwitTxReq.prototype.setTo = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional int64 amount = 2;
 * @return {number}
 */
proto.btcapi.BtcSegwitTxReq.prototype.getAmount = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}

/**
 * @param {number} value
 * @return {!proto.btcapi.BtcSegwitTxReq} returns this
 */
proto.btcapi.BtcSegwitTxReq.prototype.setAmount = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value)
}

/**
 * optional int64 fee = 3;
 * @return {number}
 */
proto.btcapi.BtcSegwitTxReq.prototype.getFee = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}

/**
 * @param {number} value
 * @return {!proto.btcapi.BtcSegwitTxReq} returns this
 */
proto.btcapi.BtcSegwitTxReq.prototype.setFee = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value)
}

/**
 * optional uint32 change_address_index = 4;
 * @return {number}
 */
proto.btcapi.BtcSegwitTxReq.prototype.getChangeAddressIndex = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
}

/**
 * @param {number} value
 * @return {!proto.btcapi.BtcSegwitTxReq} returns this
 */
proto.btcapi.BtcSegwitTxReq.prototype.setChangeAddressIndex = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value)
}

/**
 * repeated Utxo unspents = 5;
 * @return {!Array<!proto.btcapi.Utxo>}
 */
proto.btcapi.BtcSegwitTxReq.prototype.getUnspentsList = function () {
  return /** @type{!Array<!proto.btcapi.Utxo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.btcapi.Utxo, 5))
}

/**
 * @param {!Array<!proto.btcapi.Utxo>} value
 * @return {!proto.btcapi.BtcSegwitTxReq} returns this
*/
proto.btcapi.BtcSegwitTxReq.prototype.setUnspentsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value)
}

/**
 * @param {!proto.btcapi.Utxo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.btcapi.Utxo}
 */
proto.btcapi.BtcSegwitTxReq.prototype.addUnspents = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.btcapi.Utxo, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.btcapi.BtcSegwitTxReq} returns this
 */
proto.btcapi.BtcSegwitTxReq.prototype.clearUnspentsList = function () {
  return this.setUnspentsList([])
}

/**
 * optional bytes extra_data = 6;
 * @return {!(string|Uint8Array)}
 */
proto.btcapi.BtcSegwitTxReq.prototype.getExtraData = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ''))
}

/**
 * optional bytes extra_data = 6;
 * This is a type-conversion wrapper around `getExtraData()`
 * @return {string}
 */
proto.btcapi.BtcSegwitTxReq.prototype.getExtraData_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getExtraData()))
}

/**
 * optional bytes extra_data = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExtraData()`
 * @return {!Uint8Array}
 */
proto.btcapi.BtcSegwitTxReq.prototype.getExtraData_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getExtraData()))
}

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.btcapi.BtcSegwitTxReq} returns this
 */
proto.btcapi.BtcSegwitTxReq.prototype.setExtraData = function (value) {
  return jspb.Message.setProto3BytesField(this, 6, value)
}

/**
 * optional int32 property_id = 7;
 * @return {number}
 */
proto.btcapi.BtcSegwitTxReq.prototype.getPropertyId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0))
}

/**
 * @param {number} value
 * @return {!proto.btcapi.BtcSegwitTxReq} returns this
 */
proto.btcapi.BtcSegwitTxReq.prototype.setPropertyId = function (value) {
  return jspb.Message.setProto3IntField(this, 7, value)
}

/**
 * optional string network = 8;
 * @return {string}
 */
proto.btcapi.BtcSegwitTxReq.prototype.getNetwork = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ''))
}

/**
 * @param {string} value
 * @return {!proto.btcapi.BtcSegwitTxReq} returns this
 */
proto.btcapi.BtcSegwitTxReq.prototype.setNetwork = function (value) {
  return jspb.Message.setProto3StringField(this, 8, value)
}

/**
 * optional string path_prefix = 9;
 * @return {string}
 */
proto.btcapi.BtcSegwitTxReq.prototype.getPathPrefix = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ''))
}

/**
 * @param {string} value
 * @return {!proto.btcapi.BtcSegwitTxReq} returns this
 */
proto.btcapi.BtcSegwitTxReq.prototype.setPathPrefix = function (value) {
  return jspb.Message.setProto3StringField(this, 9, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.btcapi.BtcSegwitTxRes.prototype.toObject = function (opt_includeInstance) {
    return proto.btcapi.BtcSegwitTxRes.toObject(opt_includeInstance, this)
  }

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.btcapi.BtcSegwitTxRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.btcapi.BtcSegwitTxRes.toObject = function (includeInstance, msg) {
    var f, obj = {
      witnessTxData: jspb.Message.getFieldWithDefault(msg, 1, ''),
      wtxHash: jspb.Message.getFieldWithDefault(msg, 2, ''),
      txHash: jspb.Message.getFieldWithDefault(msg, 3, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.btcapi.BtcSegwitTxRes}
 */
proto.btcapi.BtcSegwitTxRes.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.btcapi.BtcSegwitTxRes()
  return proto.btcapi.BtcSegwitTxRes.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.btcapi.BtcSegwitTxRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.btcapi.BtcSegwitTxRes}
 */
proto.btcapi.BtcSegwitTxRes.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setWitnessTxData(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setWtxHash(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setTxHash(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.btcapi.BtcSegwitTxRes.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.btcapi.BtcSegwitTxRes.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.btcapi.BtcSegwitTxRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.btcapi.BtcSegwitTxRes.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getWitnessTxData()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
  f = message.getWtxHash()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getTxHash()
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    )
  }
}

/**
 * optional string witness_tx_data = 1;
 * @return {string}
 */
proto.btcapi.BtcSegwitTxRes.prototype.getWitnessTxData = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.btcapi.BtcSegwitTxRes} returns this
 */
proto.btcapi.BtcSegwitTxRes.prototype.setWitnessTxData = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string wtx_hash = 2;
 * @return {string}
 */
proto.btcapi.BtcSegwitTxRes.prototype.getWtxHash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.btcapi.BtcSegwitTxRes} returns this
 */
proto.btcapi.BtcSegwitTxRes.prototype.setWtxHash = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional string tx_hash = 3;
 * @return {string}
 */
proto.btcapi.BtcSegwitTxRes.prototype.getTxHash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}

/**
 * @param {string} value
 * @return {!proto.btcapi.BtcSegwitTxRes} returns this
 */
proto.btcapi.BtcSegwitTxRes.prototype.setTxHash = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.btcapi.BtcXpubReq.prototype.toObject = function (opt_includeInstance) {
    return proto.btcapi.BtcXpubReq.toObject(opt_includeInstance, this)
  }

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.btcapi.BtcXpubReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.btcapi.BtcXpubReq.toObject = function (includeInstance, msg) {
    var f, obj = {
      network: jspb.Message.getFieldWithDefault(msg, 1, ''),
      path: jspb.Message.getFieldWithDefault(msg, 2, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.btcapi.BtcXpubReq}
 */
proto.btcapi.BtcXpubReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.btcapi.BtcXpubReq()
  return proto.btcapi.BtcXpubReq.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.btcapi.BtcXpubReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.btcapi.BtcXpubReq}
 */
proto.btcapi.BtcXpubReq.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setNetwork(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setPath(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.btcapi.BtcXpubReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.btcapi.BtcXpubReq.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.btcapi.BtcXpubReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.btcapi.BtcXpubReq.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getNetwork()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
  f = message.getPath()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
}

/**
 * optional string network = 1;
 * @return {string}
 */
proto.btcapi.BtcXpubReq.prototype.getNetwork = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.btcapi.BtcXpubReq} returns this
 */
proto.btcapi.BtcXpubReq.prototype.setNetwork = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string path = 2;
 * @return {string}
 */
proto.btcapi.BtcXpubReq.prototype.getPath = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.btcapi.BtcXpubReq} returns this
 */
proto.btcapi.BtcXpubReq.prototype.setPath = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.btcapi.BtcXpubRes.prototype.toObject = function (opt_includeInstance) {
    return proto.btcapi.BtcXpubRes.toObject(opt_includeInstance, this)
  }

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.btcapi.BtcXpubRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.btcapi.BtcXpubRes.toObject = function (includeInstance, msg) {
    var f, obj = {
      xpub: jspb.Message.getFieldWithDefault(msg, 1, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.btcapi.BtcXpubRes}
 */
proto.btcapi.BtcXpubRes.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.btcapi.BtcXpubRes()
  return proto.btcapi.BtcXpubRes.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.btcapi.BtcXpubRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.btcapi.BtcXpubRes}
 */
proto.btcapi.BtcXpubRes.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setXpub(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.btcapi.BtcXpubRes.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.btcapi.BtcXpubRes.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.btcapi.BtcXpubRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.btcapi.BtcXpubRes.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getXpub()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
}

/**
 * optional string xpub = 1;
 * @return {string}
 */
proto.btcapi.BtcXpubRes.prototype.getXpub = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.btcapi.BtcXpubRes} returns this
 */
proto.btcapi.BtcXpubRes.prototype.setXpub = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.btcapi.BtcAddressReq.prototype.toObject = function (opt_includeInstance) {
    return proto.btcapi.BtcAddressReq.toObject(opt_includeInstance, this)
  }

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.btcapi.BtcAddressReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.btcapi.BtcAddressReq.toObject = function (includeInstance, msg) {
    var f, obj = {
      network: jspb.Message.getFieldWithDefault(msg, 1, ''),
      path: jspb.Message.getFieldWithDefault(msg, 2, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.btcapi.BtcAddressReq}
 */
proto.btcapi.BtcAddressReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.btcapi.BtcAddressReq()
  return proto.btcapi.BtcAddressReq.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.btcapi.BtcAddressReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.btcapi.BtcAddressReq}
 */
proto.btcapi.BtcAddressReq.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setNetwork(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setPath(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.btcapi.BtcAddressReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.btcapi.BtcAddressReq.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.btcapi.BtcAddressReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.btcapi.BtcAddressReq.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getNetwork()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
  f = message.getPath()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
}

/**
 * optional string network = 1;
 * @return {string}
 */
proto.btcapi.BtcAddressReq.prototype.getNetwork = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.btcapi.BtcAddressReq} returns this
 */
proto.btcapi.BtcAddressReq.prototype.setNetwork = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string path = 2;
 * @return {string}
 */
proto.btcapi.BtcAddressReq.prototype.getPath = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.btcapi.BtcAddressReq} returns this
 */
proto.btcapi.BtcAddressReq.prototype.setPath = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.btcapi.BtcAddressRes.prototype.toObject = function (opt_includeInstance) {
    return proto.btcapi.BtcAddressRes.toObject(opt_includeInstance, this)
  }

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.btcapi.BtcAddressRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.btcapi.BtcAddressRes.toObject = function (includeInstance, msg) {
    var f, obj = {
      address: jspb.Message.getFieldWithDefault(msg, 1, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.btcapi.BtcAddressRes}
 */
proto.btcapi.BtcAddressRes.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.btcapi.BtcAddressRes()
  return proto.btcapi.BtcAddressRes.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.btcapi.BtcAddressRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.btcapi.BtcAddressRes}
 */
proto.btcapi.BtcAddressRes.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setAddress(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.btcapi.BtcAddressRes.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.btcapi.BtcAddressRes.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.btcapi.BtcAddressRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.btcapi.BtcAddressRes.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getAddress()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
}

/**
 * optional string address = 1;
 * @return {string}
 */
proto.btcapi.BtcAddressRes.prototype.getAddress = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.btcapi.BtcAddressRes} returns this
 */
proto.btcapi.BtcAddressRes.prototype.setAddress = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

goog.object.extend(exports, proto.btcapi)
