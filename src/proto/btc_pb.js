// source: btc.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.btcapi.BtcTxExtra', null, global);
goog.exportSymbol('proto.btcapi.BtcTxInput', null, global);
goog.exportSymbol('proto.btcapi.BtcTxOutput', null, global);
goog.exportSymbol('proto.btcapi.BtcXpubReq', null, global);
goog.exportSymbol('proto.btcapi.BtcXpubRes', null, global);
goog.exportSymbol('proto.btcapi.Utxo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.btcapi.Utxo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.btcapi.Utxo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.btcapi.Utxo.displayName = 'proto.btcapi.Utxo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.btcapi.BtcTxExtra = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.btcapi.BtcTxExtra, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.btcapi.BtcTxExtra.displayName = 'proto.btcapi.BtcTxExtra';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.btcapi.BtcTxInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.btcapi.BtcTxInput.repeatedFields_, null);
};
goog.inherits(proto.btcapi.BtcTxInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.btcapi.BtcTxInput.displayName = 'proto.btcapi.BtcTxInput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.btcapi.BtcTxOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.btcapi.BtcTxOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.btcapi.BtcTxOutput.displayName = 'proto.btcapi.BtcTxOutput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.btcapi.BtcXpubReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.btcapi.BtcXpubReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.btcapi.BtcXpubReq.displayName = 'proto.btcapi.BtcXpubReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.btcapi.BtcXpubRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.btcapi.BtcXpubRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.btcapi.BtcXpubRes.displayName = 'proto.btcapi.BtcXpubRes';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.btcapi.Utxo.prototype.toObject = function(opt_includeInstance) {
  return proto.btcapi.Utxo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.btcapi.Utxo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.btcapi.Utxo.toObject = function(includeInstance, msg) {
  var f, obj = {
    txHash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    vout: jspb.Message.getFieldWithDefault(msg, 2, 0),
    amount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    address: jspb.Message.getFieldWithDefault(msg, 4, ""),
    scriptPubkey: jspb.Message.getFieldWithDefault(msg, 5, ""),
    derivedPath: jspb.Message.getFieldWithDefault(msg, 6, ""),
    sequence: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.btcapi.Utxo}
 */
proto.btcapi.Utxo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.btcapi.Utxo;
  return proto.btcapi.Utxo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.btcapi.Utxo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.btcapi.Utxo}
 */
proto.btcapi.Utxo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVout(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setScriptPubkey(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDerivedPath(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSequence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.btcapi.Utxo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.btcapi.Utxo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.btcapi.Utxo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.btcapi.Utxo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVout();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getScriptPubkey();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDerivedPath();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSequence();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
};


/**
 * optional string tx_hash = 1;
 * @return {string}
 */
proto.btcapi.Utxo.prototype.getTxHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.btcapi.Utxo} returns this
 */
proto.btcapi.Utxo.prototype.setTxHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 vout = 2;
 * @return {number}
 */
proto.btcapi.Utxo.prototype.getVout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.btcapi.Utxo} returns this
 */
proto.btcapi.Utxo.prototype.setVout = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 amount = 3;
 * @return {number}
 */
proto.btcapi.Utxo.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.btcapi.Utxo} returns this
 */
proto.btcapi.Utxo.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string address = 4;
 * @return {string}
 */
proto.btcapi.Utxo.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.btcapi.Utxo} returns this
 */
proto.btcapi.Utxo.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string script_pubKey = 5;
 * @return {string}
 */
proto.btcapi.Utxo.prototype.getScriptPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.btcapi.Utxo} returns this
 */
proto.btcapi.Utxo.prototype.setScriptPubkey = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string derived_path = 6;
 * @return {string}
 */
proto.btcapi.Utxo.prototype.getDerivedPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.btcapi.Utxo} returns this
 */
proto.btcapi.Utxo.prototype.setDerivedPath = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int64 sequence = 7;
 * @return {number}
 */
proto.btcapi.Utxo.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.btcapi.Utxo} returns this
 */
proto.btcapi.Utxo.prototype.setSequence = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.btcapi.BtcTxExtra.prototype.toObject = function(opt_includeInstance) {
  return proto.btcapi.BtcTxExtra.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.btcapi.BtcTxExtra} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.btcapi.BtcTxExtra.toObject = function(includeInstance, msg) {
  var f, obj = {
    opreturn: jspb.Message.getFieldWithDefault(msg, 1, ""),
    propertyid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    feemode: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.btcapi.BtcTxExtra}
 */
proto.btcapi.BtcTxExtra.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.btcapi.BtcTxExtra;
  return proto.btcapi.BtcTxExtra.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.btcapi.BtcTxExtra} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.btcapi.BtcTxExtra}
 */
proto.btcapi.BtcTxExtra.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOpreturn(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPropertyid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeemode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.btcapi.BtcTxExtra.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.btcapi.BtcTxExtra.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.btcapi.BtcTxExtra} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.btcapi.BtcTxExtra.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpreturn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPropertyid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getFeemode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string opReturn = 1;
 * @return {string}
 */
proto.btcapi.BtcTxExtra.prototype.getOpreturn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.btcapi.BtcTxExtra} returns this
 */
proto.btcapi.BtcTxExtra.prototype.setOpreturn = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 propertyId = 2;
 * @return {number}
 */
proto.btcapi.BtcTxExtra.prototype.getPropertyid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.btcapi.BtcTxExtra} returns this
 */
proto.btcapi.BtcTxExtra.prototype.setPropertyid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string feeMode = 3;
 * @return {string}
 */
proto.btcapi.BtcTxExtra.prototype.getFeemode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.btcapi.BtcTxExtra} returns this
 */
proto.btcapi.BtcTxExtra.prototype.setFeemode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.btcapi.BtcTxInput.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.btcapi.BtcTxInput.prototype.toObject = function(opt_includeInstance) {
  return proto.btcapi.BtcTxInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.btcapi.BtcTxInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.btcapi.BtcTxInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    to: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    fee: jspb.Message.getFieldWithDefault(msg, 3, 0),
    changeAddressIndex: jspb.Message.getFieldWithDefault(msg, 4, 0),
    unspentsList: jspb.Message.toObjectList(msg.getUnspentsList(),
    proto.btcapi.Utxo.toObject, includeInstance),
    segwit: jspb.Message.getFieldWithDefault(msg, 6, ""),
    protocol: jspb.Message.getFieldWithDefault(msg, 7, ""),
    extra: (f = msg.getExtra()) && proto.btcapi.BtcTxExtra.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.btcapi.BtcTxInput}
 */
proto.btcapi.BtcTxInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.btcapi.BtcTxInput;
  return proto.btcapi.BtcTxInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.btcapi.BtcTxInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.btcapi.BtcTxInput}
 */
proto.btcapi.BtcTxInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFee(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChangeAddressIndex(value);
      break;
    case 5:
      var value = new proto.btcapi.Utxo;
      reader.readMessage(value,proto.btcapi.Utxo.deserializeBinaryFromReader);
      msg.addUnspents(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSegwit(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setProtocol(value);
      break;
    case 8:
      var value = new proto.btcapi.BtcTxExtra;
      reader.readMessage(value,proto.btcapi.BtcTxExtra.deserializeBinaryFromReader);
      msg.setExtra(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.btcapi.BtcTxInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.btcapi.BtcTxInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.btcapi.BtcTxInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.btcapi.BtcTxInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getFee();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getChangeAddressIndex();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getUnspentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.btcapi.Utxo.serializeBinaryToWriter
    );
  }
  f = message.getSegwit();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getProtocol();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getExtra();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.btcapi.BtcTxExtra.serializeBinaryToWriter
    );
  }
};


/**
 * optional string to = 1;
 * @return {string}
 */
proto.btcapi.BtcTxInput.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.btcapi.BtcTxInput} returns this
 */
proto.btcapi.BtcTxInput.prototype.setTo = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 amount = 2;
 * @return {number}
 */
proto.btcapi.BtcTxInput.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.btcapi.BtcTxInput} returns this
 */
proto.btcapi.BtcTxInput.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 fee = 3;
 * @return {number}
 */
proto.btcapi.BtcTxInput.prototype.getFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.btcapi.BtcTxInput} returns this
 */
proto.btcapi.BtcTxInput.prototype.setFee = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 change_address_index = 4;
 * @return {number}
 */
proto.btcapi.BtcTxInput.prototype.getChangeAddressIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.btcapi.BtcTxInput} returns this
 */
proto.btcapi.BtcTxInput.prototype.setChangeAddressIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated Utxo unspents = 5;
 * @return {!Array<!proto.btcapi.Utxo>}
 */
proto.btcapi.BtcTxInput.prototype.getUnspentsList = function() {
  return /** @type{!Array<!proto.btcapi.Utxo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.btcapi.Utxo, 5));
};


/**
 * @param {!Array<!proto.btcapi.Utxo>} value
 * @return {!proto.btcapi.BtcTxInput} returns this
*/
proto.btcapi.BtcTxInput.prototype.setUnspentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.btcapi.Utxo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.btcapi.Utxo}
 */
proto.btcapi.BtcTxInput.prototype.addUnspents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.btcapi.Utxo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.btcapi.BtcTxInput} returns this
 */
proto.btcapi.BtcTxInput.prototype.clearUnspentsList = function() {
  return this.setUnspentsList([]);
};


/**
 * optional string segWit = 6;
 * @return {string}
 */
proto.btcapi.BtcTxInput.prototype.getSegwit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.btcapi.BtcTxInput} returns this
 */
proto.btcapi.BtcTxInput.prototype.setSegwit = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string protocol = 7;
 * @return {string}
 */
proto.btcapi.BtcTxInput.prototype.getProtocol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.btcapi.BtcTxInput} returns this
 */
proto.btcapi.BtcTxInput.prototype.setProtocol = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional BtcTxExtra extra = 8;
 * @return {?proto.btcapi.BtcTxExtra}
 */
proto.btcapi.BtcTxInput.prototype.getExtra = function() {
  return /** @type{?proto.btcapi.BtcTxExtra} */ (
    jspb.Message.getWrapperField(this, proto.btcapi.BtcTxExtra, 8));
};


/**
 * @param {?proto.btcapi.BtcTxExtra|undefined} value
 * @return {!proto.btcapi.BtcTxInput} returns this
*/
proto.btcapi.BtcTxInput.prototype.setExtra = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.btcapi.BtcTxInput} returns this
 */
proto.btcapi.BtcTxInput.prototype.clearExtra = function() {
  return this.setExtra(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.btcapi.BtcTxInput.prototype.hasExtra = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.btcapi.BtcTxOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.btcapi.BtcTxOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.btcapi.BtcTxOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.btcapi.BtcTxOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    signature: jspb.Message.getFieldWithDefault(msg, 1, ""),
    txhash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    wtxhash: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.btcapi.BtcTxOutput}
 */
proto.btcapi.BtcTxOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.btcapi.BtcTxOutput;
  return proto.btcapi.BtcTxOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.btcapi.BtcTxOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.btcapi.BtcTxOutput}
 */
proto.btcapi.BtcTxOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignature(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxhash(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setWtxhash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.btcapi.BtcTxOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.btcapi.BtcTxOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.btcapi.BtcTxOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.btcapi.BtcTxOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignature();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTxhash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getWtxhash();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string signature = 1;
 * @return {string}
 */
proto.btcapi.BtcTxOutput.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.btcapi.BtcTxOutput} returns this
 */
proto.btcapi.BtcTxOutput.prototype.setSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string txHash = 2;
 * @return {string}
 */
proto.btcapi.BtcTxOutput.prototype.getTxhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.btcapi.BtcTxOutput} returns this
 */
proto.btcapi.BtcTxOutput.prototype.setTxhash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string wtxHash = 3;
 * @return {string}
 */
proto.btcapi.BtcTxOutput.prototype.getWtxhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.btcapi.BtcTxOutput} returns this
 */
proto.btcapi.BtcTxOutput.prototype.setWtxhash = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.btcapi.BtcXpubReq.prototype.toObject = function(opt_includeInstance) {
  return proto.btcapi.BtcXpubReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.btcapi.BtcXpubReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.btcapi.BtcXpubReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    network: jspb.Message.getFieldWithDefault(msg, 1, ""),
    path: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.btcapi.BtcXpubReq}
 */
proto.btcapi.BtcXpubReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.btcapi.BtcXpubReq;
  return proto.btcapi.BtcXpubReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.btcapi.BtcXpubReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.btcapi.BtcXpubReq}
 */
proto.btcapi.BtcXpubReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetwork(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.btcapi.BtcXpubReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.btcapi.BtcXpubReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.btcapi.BtcXpubReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.btcapi.BtcXpubReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNetwork();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string network = 1;
 * @return {string}
 */
proto.btcapi.BtcXpubReq.prototype.getNetwork = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.btcapi.BtcXpubReq} returns this
 */
proto.btcapi.BtcXpubReq.prototype.setNetwork = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string path = 2;
 * @return {string}
 */
proto.btcapi.BtcXpubReq.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.btcapi.BtcXpubReq} returns this
 */
proto.btcapi.BtcXpubReq.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.btcapi.BtcXpubRes.prototype.toObject = function(opt_includeInstance) {
  return proto.btcapi.BtcXpubRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.btcapi.BtcXpubRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.btcapi.BtcXpubRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    xpub: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.btcapi.BtcXpubRes}
 */
proto.btcapi.BtcXpubRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.btcapi.BtcXpubRes;
  return proto.btcapi.BtcXpubRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.btcapi.BtcXpubRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.btcapi.BtcXpubRes}
 */
proto.btcapi.BtcXpubRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setXpub(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.btcapi.BtcXpubRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.btcapi.BtcXpubRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.btcapi.BtcXpubRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.btcapi.BtcXpubRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getXpub();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string xpub = 1;
 * @return {string}
 */
proto.btcapi.BtcXpubRes.prototype.getXpub = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.btcapi.BtcXpubRes} returns this
 */
proto.btcapi.BtcXpubRes.prototype.setXpub = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.btcapi);
