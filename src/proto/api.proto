syntax = "proto3";
package api;

import "google/protobuf/any.proto";

// Action Wrapper
// There is a `call_tcx_api` method in tcx which act as a endpoint like RPC. It accepts a `TcxAction` param which method field is
// the real action and param field is the real param of that method.
// When an error occurred, the `call_tcx_api` will return a `Response` which isSuccess field be false and error field is the reason
// which cause the error.
message TcxAction {
    string method = 1;
    google.protobuf.Any param = 2;
}

// A common response when error occurred.
message Response {
    bool isSuccess = 1;
    string error = 2;
}

/// Initialization

// FUNCTION: init_token_core_x(InitTokenCoreXParam)
//
// initialize tcx by passing keystore folder and xpub encryption params
message InitTokenCoreXParam {
    string fileDir = 1;
    string xpubCommonKey = 2;
    string xpubCommonIv = 3;
}

/// Hd Store

// FUNCTION: hd_store_create(HdStoreCreateParam): WalletResult
//
// create a new hd keystore
message HdStoreCreateParam {
    string password = 1;
    string passwordHint = 2;
    string name = 3;
}

message WalletResult {
    string id = 1;
    string name = 2;
    string source = 3;
    repeated AccountResponse accounts = 4;
    int64 createdAt = 5;
}

// FUNCTION: hd_store_import(HdStoreImportParam): WalletResult
//
// create a new hd keystore by mnemonic
message HdStoreImportParam {
    string mnemonic = 1;
    string password = 2;
    string source = 3;
    string name = 4;
    string passwordHint = 5;
    bool overwrite = 6;
}

// FUNCTION: hd_store_derive(HdStoreDeriveParam): AccountsResponse
//
// derive new accounts from a hd keystore
message HdStoreDeriveParam {
    string id = 1;
    string password = 2;
    message Derivation {
        string chainType = 1;
        string path = 2;
        string network = 3;
        string segWit = 4;
        string chainId = 5;
    }
    repeated Derivation derivations= 3;
}

message AccountResponse {
    string chainType = 1;
    string address = 2;
    string path = 3;
    string extendedXpubKey = 4;
}

message AccountsResponse {
    repeated AccountResponse accounts = 1;
}

message AddressResponse {
    string address = 1;
}

message AddressParam{
    string chainType = 1;
    string path = 2;
    string network = 3;
}
// FUNCTION: hd_store_export(KeystoreCommonExportResult): KeystoreCommonExistsResult
//
// export the mnemonic from a hd keystore
message KeystoreCommonExportResult {
    string id = 1;
    KeyType type = 2;
    string value = 3;
}

// only support two types
enum KeyType {
    MNEMONIC = 0;
    PRIVATE_KEY = 1;
}

/// Private Key Store

// FUNCTION: private_key_store_import(PrivateKeyStoreImportParam): WalletResult
//
// create a new private key keystore by a private key
message PrivateKeyStoreImportParam {
    string privateKey = 1;
    string password = 2;
    string chainType = 3;
    string network = 4;
    string segWit = 5;

    bool overwrite = 10;
}

// FUNCTION: private_key_store_export(PrivateKeyStoreExportParam): KeystoreCommonExportResult
//
// export the private key from a private key keystore
message PrivateKeyStoreExportParam {
    string id = 1;
    string password = 2;
    string chainType = 3;
    string network = 4;
}

/// Keystore Common

// FUNCTION: keystore_common_verify(WalletKeyParam) -> Response
//
// verify the password of the keystore
message WalletKeyParam {
    string id = 1;
    string password = 2;
}

// FUNCTION: keystore_common_delete(WalletKeyParam) -> Response
//
// delete the keystore

// FUNCTION: keystore_common_exists(KeystoreCommonExistsParam): KeystoreCommonExistsResult
//
// Check is there a keystore was generate by the special privateKey or mnemonic
message KeystoreCommonExistsParam {
    KeyType type = 1;
    string value = 2;
}

message KeystoreCommonExistsResult {
    bool isExists = 1;
    string id = 2;
}

// FUNCTION: keystore_common_accounts(KeystoreCommonAccountsParam): AccountsResponse
//
// List all accounts from the keystore
message KeystoreCommonAccountsParam{
    string id = 1;
}

/// Sign Transaction

// FUNCTION: sign_tx(SignParam)
//
// Sign transaction. This api is used for sign any chain_type, you should build the right TxInput instance and
// put it in the `input` field
message SignParam {
    string id = 1;
    string password = 2;
    string chainType = 3;
    string address = 4;
    google.protobuf.Any input = 5;
}

/// Other
// TODO: annotate following message usage

// btc-fork
message ExternalAddressParam {
    string id = 1;
    string chainType = 2;
    uint32 externalIdx = 3;
}

message ExternalAddressResult {
    string address = 1;
    string derivedPath = 2;
    string type = 3;
}

message ExternalAddressExtra {
    string encXpub = 1;
    message ExternalAddress {
        string address = 1;
        string derivedPath = 2;
        string type = 3;
    }
    ExternalAddress externalAddress = 2;
}

message BtcForkDeriveExtraParam {
    string network = 1;
    string segWit = 2;
}

message HdStoreExtendedPublicKeyParam {
    string id = 1;
    string password = 2;
    string chainType = 3;
    string address = 4;
}

message HdStoreExtendedPublicKeyResponse {
    string extendedPublicKey = 1;
}

//for device manager

message DeviceParam {
    string action = 1;
    google.protobuf.Any param = 2;
}