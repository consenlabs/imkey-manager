// source: btc.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.btcapi.BtcAddressResponse', null, global);
goog.exportSymbol('proto.btcapi.BtcTxInput', null, global);
goog.exportSymbol('proto.btcapi.BtcTxOutput', null, global);
goog.exportSymbol('proto.btcapi.Utxo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.btcapi.Utxo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.btcapi.Utxo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.btcapi.Utxo.displayName = 'proto.btcapi.Utxo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.btcapi.BtcTxInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.btcapi.BtcTxInput.repeatedFields_, null);
};
goog.inherits(proto.btcapi.BtcTxInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.btcapi.BtcTxInput.displayName = 'proto.btcapi.BtcTxInput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.btcapi.BtcTxOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.btcapi.BtcTxOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.btcapi.BtcTxOutput.displayName = 'proto.btcapi.BtcTxOutput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.btcapi.BtcAddressResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.btcapi.BtcAddressResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.btcapi.BtcAddressResponse.displayName = 'proto.btcapi.BtcAddressResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.btcapi.Utxo.prototype.toObject = function(opt_includeInstance) {
  return proto.btcapi.Utxo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.btcapi.Utxo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.btcapi.Utxo.toObject = function(includeInstance, msg) {
  var f, obj = {
    txhash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    vout: jspb.Message.getFieldWithDefault(msg, 2, 0),
    amount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    address: jspb.Message.getFieldWithDefault(msg, 4, ""),
    scriptpubkey: jspb.Message.getFieldWithDefault(msg, 5, ""),
    derivedpath: jspb.Message.getFieldWithDefault(msg, 6, ""),
    sequence: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.btcapi.Utxo}
 */
proto.btcapi.Utxo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.btcapi.Utxo;
  return proto.btcapi.Utxo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.btcapi.Utxo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.btcapi.Utxo}
 */
proto.btcapi.Utxo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxhash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVout(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setScriptpubkey(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDerivedpath(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSequence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.btcapi.Utxo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.btcapi.Utxo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.btcapi.Utxo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.btcapi.Utxo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxhash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVout();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getScriptpubkey();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDerivedpath();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSequence();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
};


/**
 * optional string txHash = 1;
 * @return {string}
 */
proto.btcapi.Utxo.prototype.getTxhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.btcapi.Utxo} returns this
 */
proto.btcapi.Utxo.prototype.setTxhash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 vout = 2;
 * @return {number}
 */
proto.btcapi.Utxo.prototype.getVout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.btcapi.Utxo} returns this
 */
proto.btcapi.Utxo.prototype.setVout = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 amount = 3;
 * @return {number}
 */
proto.btcapi.Utxo.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.btcapi.Utxo} returns this
 */
proto.btcapi.Utxo.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string address = 4;
 * @return {string}
 */
proto.btcapi.Utxo.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.btcapi.Utxo} returns this
 */
proto.btcapi.Utxo.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string scriptPubKey = 5;
 * @return {string}
 */
proto.btcapi.Utxo.prototype.getScriptpubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.btcapi.Utxo} returns this
 */
proto.btcapi.Utxo.prototype.setScriptpubkey = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string derivedPath = 6;
 * @return {string}
 */
proto.btcapi.Utxo.prototype.getDerivedpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.btcapi.Utxo} returns this
 */
proto.btcapi.Utxo.prototype.setDerivedpath = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int64 sequence = 7;
 * @return {number}
 */
proto.btcapi.Utxo.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.btcapi.Utxo} returns this
 */
proto.btcapi.Utxo.prototype.setSequence = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.btcapi.BtcTxInput.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.btcapi.BtcTxInput.prototype.toObject = function(opt_includeInstance) {
  return proto.btcapi.BtcTxInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.btcapi.BtcTxInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.btcapi.BtcTxInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    to: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    unspentsList: jspb.Message.toObjectList(msg.getUnspentsList(),
    proto.btcapi.Utxo.toObject, includeInstance),
    fee: jspb.Message.getFieldWithDefault(msg, 4, 0),
    changeaddressindex: jspb.Message.getFieldWithDefault(msg, 5, 0),
    changeaddress: jspb.Message.getFieldWithDefault(msg, 6, ""),
    network: jspb.Message.getFieldWithDefault(msg, 7, ""),
    segwit: jspb.Message.getFieldWithDefault(msg, 8, ""),
    payment: jspb.Message.getFieldWithDefault(msg, 9, ""),
    toDis: jspb.Message.getFieldWithDefault(msg, 10, ""),
    from: jspb.Message.getFieldWithDefault(msg, 11, ""),
    feeDis: jspb.Message.getFieldWithDefault(msg, 12, ""),
    extraData: msg.getExtraData_asB64(),
    pathPrefix: jspb.Message.getFieldWithDefault(msg, 14, ""),
    propertyId: jspb.Message.getFieldWithDefault(msg, 15, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.btcapi.BtcTxInput}
 */
proto.btcapi.BtcTxInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.btcapi.BtcTxInput;
  return proto.btcapi.BtcTxInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.btcapi.BtcTxInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.btcapi.BtcTxInput}
 */
proto.btcapi.BtcTxInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 3:
      var value = new proto.btcapi.Utxo;
      reader.readMessage(value,proto.btcapi.Utxo.deserializeBinaryFromReader);
      msg.addUnspents(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFee(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChangeaddressindex(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setChangeaddress(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetwork(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSegwit(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayment(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setToDis(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeeDis(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExtraData(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setPathPrefix(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPropertyId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.btcapi.BtcTxInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.btcapi.BtcTxInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.btcapi.BtcTxInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.btcapi.BtcTxInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getUnspentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.btcapi.Utxo.serializeBinaryToWriter
    );
  }
  f = message.getFee();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getChangeaddressindex();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getChangeaddress();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getNetwork();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getSegwit();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getPayment();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getToDis();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getFeeDis();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getExtraData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = message.getPathPrefix();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getPropertyId();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
};


/**
 * optional string to = 1;
 * @return {string}
 */
proto.btcapi.BtcTxInput.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.btcapi.BtcTxInput} returns this
 */
proto.btcapi.BtcTxInput.prototype.setTo = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 amount = 2;
 * @return {number}
 */
proto.btcapi.BtcTxInput.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.btcapi.BtcTxInput} returns this
 */
proto.btcapi.BtcTxInput.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated Utxo unspents = 3;
 * @return {!Array<!proto.btcapi.Utxo>}
 */
proto.btcapi.BtcTxInput.prototype.getUnspentsList = function() {
  return /** @type{!Array<!proto.btcapi.Utxo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.btcapi.Utxo, 3));
};


/**
 * @param {!Array<!proto.btcapi.Utxo>} value
 * @return {!proto.btcapi.BtcTxInput} returns this
*/
proto.btcapi.BtcTxInput.prototype.setUnspentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.btcapi.Utxo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.btcapi.Utxo}
 */
proto.btcapi.BtcTxInput.prototype.addUnspents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.btcapi.Utxo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.btcapi.BtcTxInput} returns this
 */
proto.btcapi.BtcTxInput.prototype.clearUnspentsList = function() {
  return this.setUnspentsList([]);
};


/**
 * optional int64 fee = 4;
 * @return {number}
 */
proto.btcapi.BtcTxInput.prototype.getFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.btcapi.BtcTxInput} returns this
 */
proto.btcapi.BtcTxInput.prototype.setFee = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 changeAddressIndex = 5;
 * @return {number}
 */
proto.btcapi.BtcTxInput.prototype.getChangeaddressindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.btcapi.BtcTxInput} returns this
 */
proto.btcapi.BtcTxInput.prototype.setChangeaddressindex = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string changeAddress = 6;
 * @return {string}
 */
proto.btcapi.BtcTxInput.prototype.getChangeaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.btcapi.BtcTxInput} returns this
 */
proto.btcapi.BtcTxInput.prototype.setChangeaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string network = 7;
 * @return {string}
 */
proto.btcapi.BtcTxInput.prototype.getNetwork = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.btcapi.BtcTxInput} returns this
 */
proto.btcapi.BtcTxInput.prototype.setNetwork = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string segWit = 8;
 * @return {string}
 */
proto.btcapi.BtcTxInput.prototype.getSegwit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.btcapi.BtcTxInput} returns this
 */
proto.btcapi.BtcTxInput.prototype.setSegwit = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string payment = 9;
 * @return {string}
 */
proto.btcapi.BtcTxInput.prototype.getPayment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.btcapi.BtcTxInput} returns this
 */
proto.btcapi.BtcTxInput.prototype.setPayment = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string to_dis = 10;
 * @return {string}
 */
proto.btcapi.BtcTxInput.prototype.getToDis = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.btcapi.BtcTxInput} returns this
 */
proto.btcapi.BtcTxInput.prototype.setToDis = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string from = 11;
 * @return {string}
 */
proto.btcapi.BtcTxInput.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.btcapi.BtcTxInput} returns this
 */
proto.btcapi.BtcTxInput.prototype.setFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string fee_dis = 12;
 * @return {string}
 */
proto.btcapi.BtcTxInput.prototype.getFeeDis = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.btcapi.BtcTxInput} returns this
 */
proto.btcapi.BtcTxInput.prototype.setFeeDis = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional bytes extra_data = 13;
 * @return {!(string|Uint8Array)}
 */
proto.btcapi.BtcTxInput.prototype.getExtraData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes extra_data = 13;
 * This is a type-conversion wrapper around `getExtraData()`
 * @return {string}
 */
proto.btcapi.BtcTxInput.prototype.getExtraData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExtraData()));
};


/**
 * optional bytes extra_data = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExtraData()`
 * @return {!Uint8Array}
 */
proto.btcapi.BtcTxInput.prototype.getExtraData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExtraData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.btcapi.BtcTxInput} returns this
 */
proto.btcapi.BtcTxInput.prototype.setExtraData = function(value) {
  return jspb.Message.setProto3BytesField(this, 13, value);
};


/**
 * optional string path_prefix = 14;
 * @return {string}
 */
proto.btcapi.BtcTxInput.prototype.getPathPrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.btcapi.BtcTxInput} returns this
 */
proto.btcapi.BtcTxInput.prototype.setPathPrefix = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional int32 property_id = 15;
 * @return {number}
 */
proto.btcapi.BtcTxInput.prototype.getPropertyId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.btcapi.BtcTxInput} returns this
 */
proto.btcapi.BtcTxInput.prototype.setPropertyId = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.btcapi.BtcTxOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.btcapi.BtcTxOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.btcapi.BtcTxOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.btcapi.BtcTxOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    signature: jspb.Message.getFieldWithDefault(msg, 1, ""),
    txhash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    wtxId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.btcapi.BtcTxOutput}
 */
proto.btcapi.BtcTxOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.btcapi.BtcTxOutput;
  return proto.btcapi.BtcTxOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.btcapi.BtcTxOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.btcapi.BtcTxOutput}
 */
proto.btcapi.BtcTxOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignature(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxhash(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setWtxId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.btcapi.BtcTxOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.btcapi.BtcTxOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.btcapi.BtcTxOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.btcapi.BtcTxOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignature();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTxhash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getWtxId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string signature = 1;
 * @return {string}
 */
proto.btcapi.BtcTxOutput.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.btcapi.BtcTxOutput} returns this
 */
proto.btcapi.BtcTxOutput.prototype.setSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string txHash = 2;
 * @return {string}
 */
proto.btcapi.BtcTxOutput.prototype.getTxhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.btcapi.BtcTxOutput} returns this
 */
proto.btcapi.BtcTxOutput.prototype.setTxhash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string wtx_id = 3;
 * @return {string}
 */
proto.btcapi.BtcTxOutput.prototype.getWtxId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.btcapi.BtcTxOutput} returns this
 */
proto.btcapi.BtcTxOutput.prototype.setWtxId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.btcapi.BtcAddressResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.btcapi.BtcAddressResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.btcapi.BtcAddressResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.btcapi.BtcAddressResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.btcapi.BtcAddressResponse}
 */
proto.btcapi.BtcAddressResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.btcapi.BtcAddressResponse;
  return proto.btcapi.BtcAddressResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.btcapi.BtcAddressResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.btcapi.BtcAddressResponse}
 */
proto.btcapi.BtcAddressResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.btcapi.BtcAddressResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.btcapi.BtcAddressResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.btcapi.BtcAddressResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.btcapi.BtcAddressResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.btcapi.BtcAddressResponse.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.btcapi.BtcAddressResponse} returns this
 */
proto.btcapi.BtcAddressResponse.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.btcapi);
