// source: filecoin.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.filecoinapi.FilecoinTxInput', null, global);
goog.exportSymbol('proto.filecoinapi.FilecoinTxOutput', null, global);
goog.exportSymbol('proto.filecoinapi.Signature', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.filecoinapi.FilecoinTxInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.filecoinapi.FilecoinTxInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.filecoinapi.FilecoinTxInput.displayName = 'proto.filecoinapi.FilecoinTxInput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.filecoinapi.FilecoinTxOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.filecoinapi.FilecoinTxOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.filecoinapi.FilecoinTxOutput.displayName = 'proto.filecoinapi.FilecoinTxOutput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.filecoinapi.Signature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.filecoinapi.Signature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.filecoinapi.Signature.displayName = 'proto.filecoinapi.Signature';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.filecoinapi.FilecoinTxInput.prototype.toObject = function(opt_includeInstance) {
  return proto.filecoinapi.FilecoinTxInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.filecoinapi.FilecoinTxInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoinapi.FilecoinTxInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    to: jspb.Message.getFieldWithDefault(msg, 1, ""),
    from: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nonce: jspb.Message.getFieldWithDefault(msg, 3, 0),
    value: jspb.Message.getFieldWithDefault(msg, 4, ""),
    gaslimit: jspb.Message.getFieldWithDefault(msg, 5, 0),
    gasfeecap: jspb.Message.getFieldWithDefault(msg, 6, ""),
    gaspremium: jspb.Message.getFieldWithDefault(msg, 7, ""),
    method: jspb.Message.getFieldWithDefault(msg, 8, 0),
    params: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.filecoinapi.FilecoinTxInput}
 */
proto.filecoinapi.FilecoinTxInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.filecoinapi.FilecoinTxInput;
  return proto.filecoinapi.FilecoinTxInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.filecoinapi.FilecoinTxInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.filecoinapi.FilecoinTxInput}
 */
proto.filecoinapi.FilecoinTxInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGaslimit(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setGasfeecap(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setGaspremium(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMethod(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.filecoinapi.FilecoinTxInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.filecoinapi.FilecoinTxInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.filecoinapi.FilecoinTxInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoinapi.FilecoinTxInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getGaslimit();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getGasfeecap();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getGaspremium();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getMethod();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getParams();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string to = 1;
 * @return {string}
 */
proto.filecoinapi.FilecoinTxInput.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.filecoinapi.FilecoinTxInput} returns this
 */
proto.filecoinapi.FilecoinTxInput.prototype.setTo = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string from = 2;
 * @return {string}
 */
proto.filecoinapi.FilecoinTxInput.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.filecoinapi.FilecoinTxInput} returns this
 */
proto.filecoinapi.FilecoinTxInput.prototype.setFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 nonce = 3;
 * @return {number}
 */
proto.filecoinapi.FilecoinTxInput.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.filecoinapi.FilecoinTxInput} returns this
 */
proto.filecoinapi.FilecoinTxInput.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string value = 4;
 * @return {string}
 */
proto.filecoinapi.FilecoinTxInput.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.filecoinapi.FilecoinTxInput} returns this
 */
proto.filecoinapi.FilecoinTxInput.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 gasLimit = 5;
 * @return {number}
 */
proto.filecoinapi.FilecoinTxInput.prototype.getGaslimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.filecoinapi.FilecoinTxInput} returns this
 */
proto.filecoinapi.FilecoinTxInput.prototype.setGaslimit = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string gasFeeCap = 6;
 * @return {string}
 */
proto.filecoinapi.FilecoinTxInput.prototype.getGasfeecap = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.filecoinapi.FilecoinTxInput} returns this
 */
proto.filecoinapi.FilecoinTxInput.prototype.setGasfeecap = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string gasPremium = 7;
 * @return {string}
 */
proto.filecoinapi.FilecoinTxInput.prototype.getGaspremium = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.filecoinapi.FilecoinTxInput} returns this
 */
proto.filecoinapi.FilecoinTxInput.prototype.setGaspremium = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional uint64 method = 8;
 * @return {number}
 */
proto.filecoinapi.FilecoinTxInput.prototype.getMethod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.filecoinapi.FilecoinTxInput} returns this
 */
proto.filecoinapi.FilecoinTxInput.prototype.setMethod = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string params = 9;
 * @return {string}
 */
proto.filecoinapi.FilecoinTxInput.prototype.getParams = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.filecoinapi.FilecoinTxInput} returns this
 */
proto.filecoinapi.FilecoinTxInput.prototype.setParams = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.filecoinapi.FilecoinTxOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.filecoinapi.FilecoinTxOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.filecoinapi.FilecoinTxOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoinapi.FilecoinTxOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    cid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    message: (f = msg.getMessage()) && proto.filecoinapi.FilecoinTxInput.toObject(includeInstance, f),
    signature: (f = msg.getSignature()) && proto.filecoinapi.Signature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.filecoinapi.FilecoinTxOutput}
 */
proto.filecoinapi.FilecoinTxOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.filecoinapi.FilecoinTxOutput;
  return proto.filecoinapi.FilecoinTxOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.filecoinapi.FilecoinTxOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.filecoinapi.FilecoinTxOutput}
 */
proto.filecoinapi.FilecoinTxOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCid(value);
      break;
    case 2:
      var value = new proto.filecoinapi.FilecoinTxInput;
      reader.readMessage(value,proto.filecoinapi.FilecoinTxInput.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 3:
      var value = new proto.filecoinapi.Signature;
      reader.readMessage(value,proto.filecoinapi.Signature.deserializeBinaryFromReader);
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.filecoinapi.FilecoinTxOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.filecoinapi.FilecoinTxOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.filecoinapi.FilecoinTxOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoinapi.FilecoinTxOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.filecoinapi.FilecoinTxInput.serializeBinaryToWriter
    );
  }
  f = message.getSignature();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.filecoinapi.Signature.serializeBinaryToWriter
    );
  }
};


/**
 * optional string cid = 1;
 * @return {string}
 */
proto.filecoinapi.FilecoinTxOutput.prototype.getCid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.filecoinapi.FilecoinTxOutput} returns this
 */
proto.filecoinapi.FilecoinTxOutput.prototype.setCid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional FilecoinTxInput message = 2;
 * @return {?proto.filecoinapi.FilecoinTxInput}
 */
proto.filecoinapi.FilecoinTxOutput.prototype.getMessage = function() {
  return /** @type{?proto.filecoinapi.FilecoinTxInput} */ (
    jspb.Message.getWrapperField(this, proto.filecoinapi.FilecoinTxInput, 2));
};


/**
 * @param {?proto.filecoinapi.FilecoinTxInput|undefined} value
 * @return {!proto.filecoinapi.FilecoinTxOutput} returns this
*/
proto.filecoinapi.FilecoinTxOutput.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.filecoinapi.FilecoinTxOutput} returns this
 */
proto.filecoinapi.FilecoinTxOutput.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.filecoinapi.FilecoinTxOutput.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Signature signature = 3;
 * @return {?proto.filecoinapi.Signature}
 */
proto.filecoinapi.FilecoinTxOutput.prototype.getSignature = function() {
  return /** @type{?proto.filecoinapi.Signature} */ (
    jspb.Message.getWrapperField(this, proto.filecoinapi.Signature, 3));
};


/**
 * @param {?proto.filecoinapi.Signature|undefined} value
 * @return {!proto.filecoinapi.FilecoinTxOutput} returns this
*/
proto.filecoinapi.FilecoinTxOutput.prototype.setSignature = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.filecoinapi.FilecoinTxOutput} returns this
 */
proto.filecoinapi.FilecoinTxOutput.prototype.clearSignature = function() {
  return this.setSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.filecoinapi.FilecoinTxOutput.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.filecoinapi.Signature.prototype.toObject = function(opt_includeInstance) {
  return proto.filecoinapi.Signature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.filecoinapi.Signature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoinapi.Signature.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    data: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.filecoinapi.Signature}
 */
proto.filecoinapi.Signature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.filecoinapi.Signature;
  return proto.filecoinapi.Signature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.filecoinapi.Signature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.filecoinapi.Signature}
 */
proto.filecoinapi.Signature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.filecoinapi.Signature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.filecoinapi.Signature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.filecoinapi.Signature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoinapi.Signature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 type = 1;
 * @return {number}
 */
proto.filecoinapi.Signature.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.filecoinapi.Signature} returns this
 */
proto.filecoinapi.Signature.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string data = 2;
 * @return {string}
 */
proto.filecoinapi.Signature.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.filecoinapi.Signature} returns this
 */
proto.filecoinapi.Signature.prototype.setData = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.filecoinapi);
