// source: device.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.deviceapi.ApduResponse', null, global);
goog.exportSymbol('proto.deviceapi.AppAction', null, global);
goog.exportSymbol('proto.deviceapi.AuthCode', null, global);
goog.exportSymbol('proto.deviceapi.AuthCodeResponse', null, global);
goog.exportSymbol('proto.deviceapi.AuthCodeServiceResponse', null, global);
goog.exportSymbol('proto.deviceapi.AvailableAppBean', null, global);
goog.exportSymbol('proto.deviceapi.BindAcquire', null, global);
goog.exportSymbol('proto.deviceapi.BindAcquireResponse', null, global);
goog.exportSymbol('proto.deviceapi.BindCheck', null, global);
goog.exportSymbol('proto.deviceapi.BindCheckResponse', null, global);
goog.exportSymbol('proto.deviceapi.BindDisplay', null, global);
goog.exportSymbol('proto.deviceapi.BindDisplayResponse', null, global);
goog.exportSymbol('proto.deviceapi.BleAction', null, global);
goog.exportSymbol('proto.deviceapi.CheckUpdateResponse', null, global);
goog.exportSymbol('proto.deviceapi.DeviceCert', null, global);
goog.exportSymbol('proto.deviceapi.DeviceName', null, global);
goog.exportSymbol('proto.deviceapi.EmptyResponse', null, global);
goog.exportSymbol('proto.deviceapi.GetSnResponse', null, global);
goog.exportSymbol('proto.deviceapi.SdkInfoResponse', null, global);
goog.exportSymbol('proto.deviceapi.SeAction', null, global);
goog.exportSymbol('proto.deviceapi.SeQueryResponse', null, global);
goog.exportSymbol('proto.deviceapi.SeQueryServiceResponse', null, global);
goog.exportSymbol('proto.deviceapi.Test', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deviceapi.EmptyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.deviceapi.EmptyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deviceapi.EmptyResponse.displayName = 'proto.deviceapi.EmptyResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deviceapi.AppAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.deviceapi.AppAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deviceapi.AppAction.displayName = 'proto.deviceapi.AppAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deviceapi.DeviceCert = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.deviceapi.DeviceCert, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deviceapi.DeviceCert.displayName = 'proto.deviceapi.DeviceCert';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deviceapi.AuthCode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.deviceapi.AuthCode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deviceapi.AuthCode.displayName = 'proto.deviceapi.AuthCode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deviceapi.AuthCodeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.deviceapi.AuthCodeResponse.repeatedFields_, null);
};
goog.inherits(proto.deviceapi.AuthCodeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deviceapi.AuthCodeResponse.displayName = 'proto.deviceapi.AuthCodeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deviceapi.AuthCodeServiceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.deviceapi.AuthCodeServiceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deviceapi.AuthCodeServiceResponse.displayName = 'proto.deviceapi.AuthCodeServiceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deviceapi.SeAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.deviceapi.SeAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deviceapi.SeAction.displayName = 'proto.deviceapi.SeAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deviceapi.SeQueryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.deviceapi.SeQueryResponse.repeatedFields_, null);
};
goog.inherits(proto.deviceapi.SeQueryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deviceapi.SeQueryResponse.displayName = 'proto.deviceapi.SeQueryResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deviceapi.SeQueryServiceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.deviceapi.SeQueryServiceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deviceapi.SeQueryServiceResponse.displayName = 'proto.deviceapi.SeQueryServiceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deviceapi.BindCheck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.deviceapi.BindCheck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deviceapi.BindCheck.displayName = 'proto.deviceapi.BindCheck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deviceapi.BindCheckResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.deviceapi.BindCheckResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deviceapi.BindCheckResponse.displayName = 'proto.deviceapi.BindCheckResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deviceapi.BindAcquire = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.deviceapi.BindAcquire, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deviceapi.BindAcquire.displayName = 'proto.deviceapi.BindAcquire';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deviceapi.BindAcquireResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.deviceapi.BindAcquireResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deviceapi.BindAcquireResponse.displayName = 'proto.deviceapi.BindAcquireResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deviceapi.BindDisplay = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.deviceapi.BindDisplay, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deviceapi.BindDisplay.displayName = 'proto.deviceapi.BindDisplay';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deviceapi.BindDisplayResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.deviceapi.BindDisplayResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deviceapi.BindDisplayResponse.displayName = 'proto.deviceapi.BindDisplayResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deviceapi.DeviceName = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.deviceapi.DeviceName, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deviceapi.DeviceName.displayName = 'proto.deviceapi.DeviceName';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deviceapi.GetSnResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.deviceapi.GetSnResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deviceapi.GetSnResponse.displayName = 'proto.deviceapi.GetSnResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deviceapi.ApduResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.deviceapi.ApduResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deviceapi.ApduResponse.displayName = 'proto.deviceapi.ApduResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deviceapi.Test = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.deviceapi.Test, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deviceapi.Test.displayName = 'proto.deviceapi.Test';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deviceapi.CheckUpdateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.deviceapi.CheckUpdateResponse.repeatedFields_, null);
};
goog.inherits(proto.deviceapi.CheckUpdateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deviceapi.CheckUpdateResponse.displayName = 'proto.deviceapi.CheckUpdateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deviceapi.AvailableAppBean = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.deviceapi.AvailableAppBean, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deviceapi.AvailableAppBean.displayName = 'proto.deviceapi.AvailableAppBean';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deviceapi.SdkInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.deviceapi.SdkInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deviceapi.SdkInfoResponse.displayName = 'proto.deviceapi.SdkInfoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deviceapi.BleAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.deviceapi.BleAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deviceapi.BleAction.displayName = 'proto.deviceapi.BleAction';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deviceapi.EmptyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.deviceapi.EmptyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deviceapi.EmptyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.EmptyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deviceapi.EmptyResponse}
 */
proto.deviceapi.EmptyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deviceapi.EmptyResponse;
  return proto.deviceapi.EmptyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deviceapi.EmptyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deviceapi.EmptyResponse}
 */
proto.deviceapi.EmptyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deviceapi.EmptyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deviceapi.EmptyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deviceapi.EmptyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.EmptyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deviceapi.AppAction.prototype.toObject = function(opt_includeInstance) {
  return proto.deviceapi.AppAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deviceapi.AppAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.AppAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    appName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deviceapi.AppAction}
 */
proto.deviceapi.AppAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deviceapi.AppAction;
  return proto.deviceapi.AppAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deviceapi.AppAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deviceapi.AppAction}
 */
proto.deviceapi.AppAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deviceapi.AppAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deviceapi.AppAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deviceapi.AppAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.AppAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAppName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string app_name = 1;
 * @return {string}
 */
proto.deviceapi.AppAction.prototype.getAppName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.AppAction} returns this
 */
proto.deviceapi.AppAction.prototype.setAppName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deviceapi.DeviceCert.prototype.toObject = function(opt_includeInstance) {
  return proto.deviceapi.DeviceCert.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deviceapi.DeviceCert} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.DeviceCert.toObject = function(includeInstance, msg) {
  var f, obj = {
    seId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sn: jspb.Message.getFieldWithDefault(msg, 2, ""),
    deviceCert: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deviceapi.DeviceCert}
 */
proto.deviceapi.DeviceCert.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deviceapi.DeviceCert;
  return proto.deviceapi.DeviceCert.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deviceapi.DeviceCert} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deviceapi.DeviceCert}
 */
proto.deviceapi.DeviceCert.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSn(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceCert(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deviceapi.DeviceCert.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deviceapi.DeviceCert.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deviceapi.DeviceCert} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.DeviceCert.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSn();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDeviceCert();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string se_id = 1;
 * @return {string}
 */
proto.deviceapi.DeviceCert.prototype.getSeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.DeviceCert} returns this
 */
proto.deviceapi.DeviceCert.prototype.setSeId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string sn = 2;
 * @return {string}
 */
proto.deviceapi.DeviceCert.prototype.getSn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.DeviceCert} returns this
 */
proto.deviceapi.DeviceCert.prototype.setSn = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string device_cert = 3;
 * @return {string}
 */
proto.deviceapi.DeviceCert.prototype.getDeviceCert = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.DeviceCert} returns this
 */
proto.deviceapi.DeviceCert.prototype.setDeviceCert = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deviceapi.AuthCode.prototype.toObject = function(opt_includeInstance) {
  return proto.deviceapi.AuthCode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deviceapi.AuthCode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.AuthCode.toObject = function(includeInstance, msg) {
  var f, obj = {
    seId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    authCode: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deviceapi.AuthCode}
 */
proto.deviceapi.AuthCode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deviceapi.AuthCode;
  return proto.deviceapi.AuthCode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deviceapi.AuthCode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deviceapi.AuthCode}
 */
proto.deviceapi.AuthCode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deviceapi.AuthCode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deviceapi.AuthCode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deviceapi.AuthCode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.AuthCode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAuthCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string se_id = 1;
 * @return {string}
 */
proto.deviceapi.AuthCode.prototype.getSeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.AuthCode} returns this
 */
proto.deviceapi.AuthCode.prototype.setSeId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string auth_code = 2;
 * @return {string}
 */
proto.deviceapi.AuthCode.prototype.getAuthCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.AuthCode} returns this
 */
proto.deviceapi.AuthCode.prototype.setAuthCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.deviceapi.AuthCodeResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deviceapi.AuthCodeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.deviceapi.AuthCodeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deviceapi.AuthCodeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.AuthCodeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    seId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nextStepkey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    apduListList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deviceapi.AuthCodeResponse}
 */
proto.deviceapi.AuthCodeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deviceapi.AuthCodeResponse;
  return proto.deviceapi.AuthCodeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deviceapi.AuthCodeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deviceapi.AuthCodeResponse}
 */
proto.deviceapi.AuthCodeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextStepkey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addApduList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deviceapi.AuthCodeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deviceapi.AuthCodeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deviceapi.AuthCodeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.AuthCodeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNextStepkey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getApduListList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string se_id = 1;
 * @return {string}
 */
proto.deviceapi.AuthCodeResponse.prototype.getSeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.AuthCodeResponse} returns this
 */
proto.deviceapi.AuthCodeResponse.prototype.setSeId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string next_stepkey = 2;
 * @return {string}
 */
proto.deviceapi.AuthCodeResponse.prototype.getNextStepkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.AuthCodeResponse} returns this
 */
proto.deviceapi.AuthCodeResponse.prototype.setNextStepkey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string apdu_list = 3;
 * @return {!Array<string>}
 */
proto.deviceapi.AuthCodeResponse.prototype.getApduListList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.deviceapi.AuthCodeResponse} returns this
 */
proto.deviceapi.AuthCodeResponse.prototype.setApduListList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.deviceapi.AuthCodeResponse} returns this
 */
proto.deviceapi.AuthCodeResponse.prototype.addApduList = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.deviceapi.AuthCodeResponse} returns this
 */
proto.deviceapi.AuthCodeResponse.prototype.clearApduListList = function() {
  return this.setApduListList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deviceapi.AuthCodeServiceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.deviceapi.AuthCodeServiceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deviceapi.AuthCodeServiceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.AuthCodeServiceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    returnCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    returnMsg: jspb.Message.getFieldWithDefault(msg, 2, ""),
    returnData: (f = msg.getReturnData()) && proto.deviceapi.AuthCodeResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deviceapi.AuthCodeServiceResponse}
 */
proto.deviceapi.AuthCodeServiceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deviceapi.AuthCodeServiceResponse;
  return proto.deviceapi.AuthCodeServiceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deviceapi.AuthCodeServiceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deviceapi.AuthCodeServiceResponse}
 */
proto.deviceapi.AuthCodeServiceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReturnCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReturnMsg(value);
      break;
    case 3:
      var value = new proto.deviceapi.AuthCodeResponse;
      reader.readMessage(value,proto.deviceapi.AuthCodeResponse.deserializeBinaryFromReader);
      msg.setReturnData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deviceapi.AuthCodeServiceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deviceapi.AuthCodeServiceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deviceapi.AuthCodeServiceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.AuthCodeServiceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReturnCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReturnMsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReturnData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.deviceapi.AuthCodeResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional string return_code = 1;
 * @return {string}
 */
proto.deviceapi.AuthCodeServiceResponse.prototype.getReturnCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.AuthCodeServiceResponse} returns this
 */
proto.deviceapi.AuthCodeServiceResponse.prototype.setReturnCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string return_msg = 2;
 * @return {string}
 */
proto.deviceapi.AuthCodeServiceResponse.prototype.getReturnMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.AuthCodeServiceResponse} returns this
 */
proto.deviceapi.AuthCodeServiceResponse.prototype.setReturnMsg = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional AuthCodeResponse return_data = 3;
 * @return {?proto.deviceapi.AuthCodeResponse}
 */
proto.deviceapi.AuthCodeServiceResponse.prototype.getReturnData = function() {
  return /** @type{?proto.deviceapi.AuthCodeResponse} */ (
    jspb.Message.getWrapperField(this, proto.deviceapi.AuthCodeResponse, 3));
};


/**
 * @param {?proto.deviceapi.AuthCodeResponse|undefined} value
 * @return {!proto.deviceapi.AuthCodeServiceResponse} returns this
*/
proto.deviceapi.AuthCodeServiceResponse.prototype.setReturnData = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.deviceapi.AuthCodeServiceResponse} returns this
 */
proto.deviceapi.AuthCodeServiceResponse.prototype.clearReturnData = function() {
  return this.setReturnData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.deviceapi.AuthCodeServiceResponse.prototype.hasReturnData = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deviceapi.SeAction.prototype.toObject = function(opt_includeInstance) {
  return proto.deviceapi.SeAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deviceapi.SeAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.SeAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    seId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sn: jspb.Message.getFieldWithDefault(msg, 2, ""),
    deviceCert: jspb.Message.getFieldWithDefault(msg, 3, ""),
    sdkVersion: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deviceapi.SeAction}
 */
proto.deviceapi.SeAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deviceapi.SeAction;
  return proto.deviceapi.SeAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deviceapi.SeAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deviceapi.SeAction}
 */
proto.deviceapi.SeAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSn(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceCert(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdkVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deviceapi.SeAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deviceapi.SeAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deviceapi.SeAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.SeAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSn();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDeviceCert();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSdkVersion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string se_id = 1;
 * @return {string}
 */
proto.deviceapi.SeAction.prototype.getSeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.SeAction} returns this
 */
proto.deviceapi.SeAction.prototype.setSeId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string sn = 2;
 * @return {string}
 */
proto.deviceapi.SeAction.prototype.getSn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.SeAction} returns this
 */
proto.deviceapi.SeAction.prototype.setSn = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string device_cert = 3;
 * @return {string}
 */
proto.deviceapi.SeAction.prototype.getDeviceCert = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.SeAction} returns this
 */
proto.deviceapi.SeAction.prototype.setDeviceCert = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string sdk_version = 4;
 * @return {string}
 */
proto.deviceapi.SeAction.prototype.getSdkVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.SeAction} returns this
 */
proto.deviceapi.SeAction.prototype.setSdkVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.deviceapi.SeQueryResponse.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deviceapi.SeQueryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.deviceapi.SeQueryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deviceapi.SeQueryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.SeQueryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    seId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nextStepkey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sn: jspb.Message.getFieldWithDefault(msg, 3, ""),
    sdkMode: jspb.Message.getFieldWithDefault(msg, 4, ""),
    availableAppBeanListList: jspb.Message.toObjectList(msg.getAvailableAppBeanListList(),
    proto.deviceapi.AvailableAppBean.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deviceapi.SeQueryResponse}
 */
proto.deviceapi.SeQueryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deviceapi.SeQueryResponse;
  return proto.deviceapi.SeQueryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deviceapi.SeQueryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deviceapi.SeQueryResponse}
 */
proto.deviceapi.SeQueryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextStepkey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSn(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdkMode(value);
      break;
    case 5:
      var value = new proto.deviceapi.AvailableAppBean;
      reader.readMessage(value,proto.deviceapi.AvailableAppBean.deserializeBinaryFromReader);
      msg.addAvailableAppBeanList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deviceapi.SeQueryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deviceapi.SeQueryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deviceapi.SeQueryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.SeQueryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNextStepkey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSn();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSdkMode();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAvailableAppBeanListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.deviceapi.AvailableAppBean.serializeBinaryToWriter
    );
  }
};


/**
 * optional string se_id = 1;
 * @return {string}
 */
proto.deviceapi.SeQueryResponse.prototype.getSeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.SeQueryResponse} returns this
 */
proto.deviceapi.SeQueryResponse.prototype.setSeId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string next_stepkey = 2;
 * @return {string}
 */
proto.deviceapi.SeQueryResponse.prototype.getNextStepkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.SeQueryResponse} returns this
 */
proto.deviceapi.SeQueryResponse.prototype.setNextStepkey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string sn = 3;
 * @return {string}
 */
proto.deviceapi.SeQueryResponse.prototype.getSn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.SeQueryResponse} returns this
 */
proto.deviceapi.SeQueryResponse.prototype.setSn = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string sdk_mode = 4;
 * @return {string}
 */
proto.deviceapi.SeQueryResponse.prototype.getSdkMode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.SeQueryResponse} returns this
 */
proto.deviceapi.SeQueryResponse.prototype.setSdkMode = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated AvailableAppBean available_app_bean_list = 5;
 * @return {!Array<!proto.deviceapi.AvailableAppBean>}
 */
proto.deviceapi.SeQueryResponse.prototype.getAvailableAppBeanListList = function() {
  return /** @type{!Array<!proto.deviceapi.AvailableAppBean>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.deviceapi.AvailableAppBean, 5));
};


/**
 * @param {!Array<!proto.deviceapi.AvailableAppBean>} value
 * @return {!proto.deviceapi.SeQueryResponse} returns this
*/
proto.deviceapi.SeQueryResponse.prototype.setAvailableAppBeanListList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.deviceapi.AvailableAppBean=} opt_value
 * @param {number=} opt_index
 * @return {!proto.deviceapi.AvailableAppBean}
 */
proto.deviceapi.SeQueryResponse.prototype.addAvailableAppBeanList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.deviceapi.AvailableAppBean, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.deviceapi.SeQueryResponse} returns this
 */
proto.deviceapi.SeQueryResponse.prototype.clearAvailableAppBeanListList = function() {
  return this.setAvailableAppBeanListList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deviceapi.SeQueryServiceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.deviceapi.SeQueryServiceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deviceapi.SeQueryServiceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.SeQueryServiceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    returnCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    returnMsg: jspb.Message.getFieldWithDefault(msg, 2, ""),
    returnData: (f = msg.getReturnData()) && proto.deviceapi.SeQueryResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deviceapi.SeQueryServiceResponse}
 */
proto.deviceapi.SeQueryServiceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deviceapi.SeQueryServiceResponse;
  return proto.deviceapi.SeQueryServiceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deviceapi.SeQueryServiceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deviceapi.SeQueryServiceResponse}
 */
proto.deviceapi.SeQueryServiceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReturnCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReturnMsg(value);
      break;
    case 3:
      var value = new proto.deviceapi.SeQueryResponse;
      reader.readMessage(value,proto.deviceapi.SeQueryResponse.deserializeBinaryFromReader);
      msg.setReturnData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deviceapi.SeQueryServiceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deviceapi.SeQueryServiceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deviceapi.SeQueryServiceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.SeQueryServiceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReturnCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReturnMsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReturnData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.deviceapi.SeQueryResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional string return_code = 1;
 * @return {string}
 */
proto.deviceapi.SeQueryServiceResponse.prototype.getReturnCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.SeQueryServiceResponse} returns this
 */
proto.deviceapi.SeQueryServiceResponse.prototype.setReturnCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string return_msg = 2;
 * @return {string}
 */
proto.deviceapi.SeQueryServiceResponse.prototype.getReturnMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.SeQueryServiceResponse} returns this
 */
proto.deviceapi.SeQueryServiceResponse.prototype.setReturnMsg = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional SeQueryResponse return_data = 3;
 * @return {?proto.deviceapi.SeQueryResponse}
 */
proto.deviceapi.SeQueryServiceResponse.prototype.getReturnData = function() {
  return /** @type{?proto.deviceapi.SeQueryResponse} */ (
    jspb.Message.getWrapperField(this, proto.deviceapi.SeQueryResponse, 3));
};


/**
 * @param {?proto.deviceapi.SeQueryResponse|undefined} value
 * @return {!proto.deviceapi.SeQueryServiceResponse} returns this
*/
proto.deviceapi.SeQueryServiceResponse.prototype.setReturnData = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.deviceapi.SeQueryServiceResponse} returns this
 */
proto.deviceapi.SeQueryServiceResponse.prototype.clearReturnData = function() {
  return this.setReturnData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.deviceapi.SeQueryServiceResponse.prototype.hasReturnData = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deviceapi.BindCheck.prototype.toObject = function(opt_includeInstance) {
  return proto.deviceapi.BindCheck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deviceapi.BindCheck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.BindCheck.toObject = function(includeInstance, msg) {
  var f, obj = {
    filePath: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deviceapi.BindCheck}
 */
proto.deviceapi.BindCheck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deviceapi.BindCheck;
  return proto.deviceapi.BindCheck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deviceapi.BindCheck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deviceapi.BindCheck}
 */
proto.deviceapi.BindCheck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilePath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deviceapi.BindCheck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deviceapi.BindCheck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deviceapi.BindCheck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.BindCheck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilePath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string file_path = 1;
 * @return {string}
 */
proto.deviceapi.BindCheck.prototype.getFilePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.BindCheck} returns this
 */
proto.deviceapi.BindCheck.prototype.setFilePath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deviceapi.BindCheckResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.deviceapi.BindCheckResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deviceapi.BindCheckResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.BindCheckResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    bindStatus: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deviceapi.BindCheckResponse}
 */
proto.deviceapi.BindCheckResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deviceapi.BindCheckResponse;
  return proto.deviceapi.BindCheckResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deviceapi.BindCheckResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deviceapi.BindCheckResponse}
 */
proto.deviceapi.BindCheckResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBindStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deviceapi.BindCheckResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deviceapi.BindCheckResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deviceapi.BindCheckResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.BindCheckResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBindStatus();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string bind_status = 1;
 * @return {string}
 */
proto.deviceapi.BindCheckResponse.prototype.getBindStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.BindCheckResponse} returns this
 */
proto.deviceapi.BindCheckResponse.prototype.setBindStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deviceapi.BindAcquire.prototype.toObject = function(opt_includeInstance) {
  return proto.deviceapi.BindAcquire.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deviceapi.BindAcquire} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.BindAcquire.toObject = function(includeInstance, msg) {
  var f, obj = {
    bindCode: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deviceapi.BindAcquire}
 */
proto.deviceapi.BindAcquire.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deviceapi.BindAcquire;
  return proto.deviceapi.BindAcquire.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deviceapi.BindAcquire} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deviceapi.BindAcquire}
 */
proto.deviceapi.BindAcquire.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBindCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deviceapi.BindAcquire.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deviceapi.BindAcquire.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deviceapi.BindAcquire} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.BindAcquire.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBindCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string bind_code = 1;
 * @return {string}
 */
proto.deviceapi.BindAcquire.prototype.getBindCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.BindAcquire} returns this
 */
proto.deviceapi.BindAcquire.prototype.setBindCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deviceapi.BindAcquireResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.deviceapi.BindAcquireResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deviceapi.BindAcquireResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.BindAcquireResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    bindResult: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deviceapi.BindAcquireResponse}
 */
proto.deviceapi.BindAcquireResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deviceapi.BindAcquireResponse;
  return proto.deviceapi.BindAcquireResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deviceapi.BindAcquireResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deviceapi.BindAcquireResponse}
 */
proto.deviceapi.BindAcquireResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBindResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deviceapi.BindAcquireResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deviceapi.BindAcquireResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deviceapi.BindAcquireResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.BindAcquireResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBindResult();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string bind_result = 1;
 * @return {string}
 */
proto.deviceapi.BindAcquireResponse.prototype.getBindResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.BindAcquireResponse} returns this
 */
proto.deviceapi.BindAcquireResponse.prototype.setBindResult = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deviceapi.BindDisplay.prototype.toObject = function(opt_includeInstance) {
  return proto.deviceapi.BindDisplay.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deviceapi.BindDisplay} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.BindDisplay.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deviceapi.BindDisplay}
 */
proto.deviceapi.BindDisplay.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deviceapi.BindDisplay;
  return proto.deviceapi.BindDisplay.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deviceapi.BindDisplay} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deviceapi.BindDisplay}
 */
proto.deviceapi.BindDisplay.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deviceapi.BindDisplay.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deviceapi.BindDisplay.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deviceapi.BindDisplay} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.BindDisplay.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deviceapi.BindDisplayResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.deviceapi.BindDisplayResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deviceapi.BindDisplayResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.BindDisplayResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    bindDisplayResult: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deviceapi.BindDisplayResponse}
 */
proto.deviceapi.BindDisplayResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deviceapi.BindDisplayResponse;
  return proto.deviceapi.BindDisplayResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deviceapi.BindDisplayResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deviceapi.BindDisplayResponse}
 */
proto.deviceapi.BindDisplayResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBindDisplayResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deviceapi.BindDisplayResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deviceapi.BindDisplayResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deviceapi.BindDisplayResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.BindDisplayResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBindDisplayResult();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string bind_display_result = 1;
 * @return {string}
 */
proto.deviceapi.BindDisplayResponse.prototype.getBindDisplayResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.BindDisplayResponse} returns this
 */
proto.deviceapi.BindDisplayResponse.prototype.setBindDisplayResult = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deviceapi.DeviceName.prototype.toObject = function(opt_includeInstance) {
  return proto.deviceapi.DeviceName.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deviceapi.DeviceName} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.DeviceName.toObject = function(includeInstance, msg) {
  var f, obj = {
    bleName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deviceapi.DeviceName}
 */
proto.deviceapi.DeviceName.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deviceapi.DeviceName;
  return proto.deviceapi.DeviceName.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deviceapi.DeviceName} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deviceapi.DeviceName}
 */
proto.deviceapi.DeviceName.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBleName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deviceapi.DeviceName.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deviceapi.DeviceName.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deviceapi.DeviceName} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.DeviceName.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBleName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string ble_name = 1;
 * @return {string}
 */
proto.deviceapi.DeviceName.prototype.getBleName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.DeviceName} returns this
 */
proto.deviceapi.DeviceName.prototype.setBleName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deviceapi.GetSnResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.deviceapi.GetSnResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deviceapi.GetSnResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.GetSnResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    sn: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deviceapi.GetSnResponse}
 */
proto.deviceapi.GetSnResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deviceapi.GetSnResponse;
  return proto.deviceapi.GetSnResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deviceapi.GetSnResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deviceapi.GetSnResponse}
 */
proto.deviceapi.GetSnResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deviceapi.GetSnResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deviceapi.GetSnResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deviceapi.GetSnResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.GetSnResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string sn = 1;
 * @return {string}
 */
proto.deviceapi.GetSnResponse.prototype.getSn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.GetSnResponse} returns this
 */
proto.deviceapi.GetSnResponse.prototype.setSn = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deviceapi.ApduResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.deviceapi.ApduResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deviceapi.ApduResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.ApduResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deviceapi.ApduResponse}
 */
proto.deviceapi.ApduResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deviceapi.ApduResponse;
  return proto.deviceapi.ApduResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deviceapi.ApduResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deviceapi.ApduResponse}
 */
proto.deviceapi.ApduResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deviceapi.ApduResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deviceapi.ApduResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deviceapi.ApduResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.ApduResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string result = 1;
 * @return {string}
 */
proto.deviceapi.ApduResponse.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.ApduResponse} returns this
 */
proto.deviceapi.ApduResponse.prototype.setResult = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deviceapi.Test.prototype.toObject = function(opt_includeInstance) {
  return proto.deviceapi.Test.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deviceapi.Test} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.Test.toObject = function(includeInstance, msg) {
  var f, obj = {
    tt: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deviceapi.Test}
 */
proto.deviceapi.Test.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deviceapi.Test;
  return proto.deviceapi.Test.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deviceapi.Test} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deviceapi.Test}
 */
proto.deviceapi.Test.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deviceapi.Test.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deviceapi.Test.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deviceapi.Test} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.Test.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTt();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string tt = 1;
 * @return {string}
 */
proto.deviceapi.Test.prototype.getTt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.Test} returns this
 */
proto.deviceapi.Test.prototype.setTt = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.deviceapi.CheckUpdateResponse.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deviceapi.CheckUpdateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.deviceapi.CheckUpdateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deviceapi.CheckUpdateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.CheckUpdateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    seId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sn: jspb.Message.getFieldWithDefault(msg, 2, ""),
    status: jspb.Message.getFieldWithDefault(msg, 3, ""),
    sdkMode: jspb.Message.getFieldWithDefault(msg, 4, ""),
    availableAppListList: jspb.Message.toObjectList(msg.getAvailableAppListList(),
    proto.deviceapi.AvailableAppBean.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deviceapi.CheckUpdateResponse}
 */
proto.deviceapi.CheckUpdateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deviceapi.CheckUpdateResponse;
  return proto.deviceapi.CheckUpdateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deviceapi.CheckUpdateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deviceapi.CheckUpdateResponse}
 */
proto.deviceapi.CheckUpdateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSn(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdkMode(value);
      break;
    case 5:
      var value = new proto.deviceapi.AvailableAppBean;
      reader.readMessage(value,proto.deviceapi.AvailableAppBean.deserializeBinaryFromReader);
      msg.addAvailableAppList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deviceapi.CheckUpdateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deviceapi.CheckUpdateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deviceapi.CheckUpdateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.CheckUpdateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSn();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSdkMode();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAvailableAppListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.deviceapi.AvailableAppBean.serializeBinaryToWriter
    );
  }
};


/**
 * optional string se_id = 1;
 * @return {string}
 */
proto.deviceapi.CheckUpdateResponse.prototype.getSeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.CheckUpdateResponse} returns this
 */
proto.deviceapi.CheckUpdateResponse.prototype.setSeId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string sn = 2;
 * @return {string}
 */
proto.deviceapi.CheckUpdateResponse.prototype.getSn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.CheckUpdateResponse} returns this
 */
proto.deviceapi.CheckUpdateResponse.prototype.setSn = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string status = 3;
 * @return {string}
 */
proto.deviceapi.CheckUpdateResponse.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.CheckUpdateResponse} returns this
 */
proto.deviceapi.CheckUpdateResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string sdk_mode = 4;
 * @return {string}
 */
proto.deviceapi.CheckUpdateResponse.prototype.getSdkMode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.CheckUpdateResponse} returns this
 */
proto.deviceapi.CheckUpdateResponse.prototype.setSdkMode = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated AvailableAppBean available_app_list = 5;
 * @return {!Array<!proto.deviceapi.AvailableAppBean>}
 */
proto.deviceapi.CheckUpdateResponse.prototype.getAvailableAppListList = function() {
  return /** @type{!Array<!proto.deviceapi.AvailableAppBean>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.deviceapi.AvailableAppBean, 5));
};


/**
 * @param {!Array<!proto.deviceapi.AvailableAppBean>} value
 * @return {!proto.deviceapi.CheckUpdateResponse} returns this
*/
proto.deviceapi.CheckUpdateResponse.prototype.setAvailableAppListList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.deviceapi.AvailableAppBean=} opt_value
 * @param {number=} opt_index
 * @return {!proto.deviceapi.AvailableAppBean}
 */
proto.deviceapi.CheckUpdateResponse.prototype.addAvailableAppList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.deviceapi.AvailableAppBean, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.deviceapi.CheckUpdateResponse} returns this
 */
proto.deviceapi.CheckUpdateResponse.prototype.clearAvailableAppListList = function() {
  return this.setAvailableAppListList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deviceapi.AvailableAppBean.prototype.toObject = function(opt_includeInstance) {
  return proto.deviceapi.AvailableAppBean.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deviceapi.AvailableAppBean} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.AvailableAppBean.toObject = function(includeInstance, msg) {
  var f, obj = {
    appName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    appLogo: jspb.Message.getFieldWithDefault(msg, 2, ""),
    installedVersion: jspb.Message.getFieldWithDefault(msg, 3, ""),
    lastUpdated: jspb.Message.getFieldWithDefault(msg, 4, ""),
    latestVersion: jspb.Message.getFieldWithDefault(msg, 5, ""),
    installMode: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deviceapi.AvailableAppBean}
 */
proto.deviceapi.AvailableAppBean.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deviceapi.AvailableAppBean;
  return proto.deviceapi.AvailableAppBean.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deviceapi.AvailableAppBean} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deviceapi.AvailableAppBean}
 */
proto.deviceapi.AvailableAppBean.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppLogo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstalledVersion(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastUpdated(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLatestVersion(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstallMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deviceapi.AvailableAppBean.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deviceapi.AvailableAppBean.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deviceapi.AvailableAppBean} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.AvailableAppBean.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAppName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAppLogo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInstalledVersion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLastUpdated();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLatestVersion();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getInstallMode();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string app_name = 1;
 * @return {string}
 */
proto.deviceapi.AvailableAppBean.prototype.getAppName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.AvailableAppBean} returns this
 */
proto.deviceapi.AvailableAppBean.prototype.setAppName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string app_logo = 2;
 * @return {string}
 */
proto.deviceapi.AvailableAppBean.prototype.getAppLogo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.AvailableAppBean} returns this
 */
proto.deviceapi.AvailableAppBean.prototype.setAppLogo = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string installed_version = 3;
 * @return {string}
 */
proto.deviceapi.AvailableAppBean.prototype.getInstalledVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.AvailableAppBean} returns this
 */
proto.deviceapi.AvailableAppBean.prototype.setInstalledVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string last_updated = 4;
 * @return {string}
 */
proto.deviceapi.AvailableAppBean.prototype.getLastUpdated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.AvailableAppBean} returns this
 */
proto.deviceapi.AvailableAppBean.prototype.setLastUpdated = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string latest_version = 5;
 * @return {string}
 */
proto.deviceapi.AvailableAppBean.prototype.getLatestVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.AvailableAppBean} returns this
 */
proto.deviceapi.AvailableAppBean.prototype.setLatestVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string install_mode = 6;
 * @return {string}
 */
proto.deviceapi.AvailableAppBean.prototype.getInstallMode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.AvailableAppBean} returns this
 */
proto.deviceapi.AvailableAppBean.prototype.setInstallMode = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deviceapi.SdkInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.deviceapi.SdkInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deviceapi.SdkInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.SdkInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    sdkVersion: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deviceapi.SdkInfoResponse}
 */
proto.deviceapi.SdkInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deviceapi.SdkInfoResponse;
  return proto.deviceapi.SdkInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deviceapi.SdkInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deviceapi.SdkInfoResponse}
 */
proto.deviceapi.SdkInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdkVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deviceapi.SdkInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deviceapi.SdkInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deviceapi.SdkInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.SdkInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSdkVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string sdk_version = 1;
 * @return {string}
 */
proto.deviceapi.SdkInfoResponse.prototype.getSdkVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.SdkInfoResponse} returns this
 */
proto.deviceapi.SdkInfoResponse.prototype.setSdkVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deviceapi.BleAction.prototype.toObject = function(opt_includeInstance) {
  return proto.deviceapi.BleAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deviceapi.BleAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.BleAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    bleName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deviceapi.BleAction}
 */
proto.deviceapi.BleAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deviceapi.BleAction;
  return proto.deviceapi.BleAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deviceapi.BleAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deviceapi.BleAction}
 */
proto.deviceapi.BleAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBleName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deviceapi.BleAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deviceapi.BleAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deviceapi.BleAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deviceapi.BleAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBleName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string ble_name = 1;
 * @return {string}
 */
proto.deviceapi.BleAction.prototype.getBleName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.deviceapi.BleAction} returns this
 */
proto.deviceapi.BleAction.prototype.setBleName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.deviceapi);
