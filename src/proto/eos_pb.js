// source: eos.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf')
var goog = jspb
var global = Function('return this')()

goog.exportSymbol('proto.eosapi.EosMessageSignReq', null, global)
goog.exportSymbol('proto.eosapi.EosMessageSignRes', null, global)
goog.exportSymbol('proto.eosapi.EosPubkeyReq', null, global)
goog.exportSymbol('proto.eosapi.EosPubkeyRes', null, global)
goog.exportSymbol('proto.eosapi.EosSignData', null, global)
goog.exportSymbol('proto.eosapi.EosSignResult', null, global)
goog.exportSymbol('proto.eosapi.EosTxReq', null, global)
goog.exportSymbol('proto.eosapi.EosTxRes', null, global)
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eosapi.EosTxReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.eosapi.EosTxReq.repeatedFields_, null)
}
goog.inherits(proto.eosapi.EosTxReq, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eosapi.EosTxReq.displayName = 'proto.eosapi.EosTxReq'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eosapi.EosSignData = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.eosapi.EosSignData.repeatedFields_, null)
}
goog.inherits(proto.eosapi.EosSignData, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eosapi.EosSignData.displayName = 'proto.eosapi.EosSignData'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eosapi.EosTxRes = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.eosapi.EosTxRes.repeatedFields_, null)
}
goog.inherits(proto.eosapi.EosTxRes, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eosapi.EosTxRes.displayName = 'proto.eosapi.EosTxRes'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eosapi.EosSignResult = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.eosapi.EosSignResult.repeatedFields_, null)
}
goog.inherits(proto.eosapi.EosSignResult, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eosapi.EosSignResult.displayName = 'proto.eosapi.EosSignResult'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eosapi.EosPubkeyReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.eosapi.EosPubkeyReq, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eosapi.EosPubkeyReq.displayName = 'proto.eosapi.EosPubkeyReq'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eosapi.EosPubkeyRes = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.eosapi.EosPubkeyRes, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eosapi.EosPubkeyRes.displayName = 'proto.eosapi.EosPubkeyRes'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eosapi.EosMessageSignReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.eosapi.EosMessageSignReq, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eosapi.EosMessageSignReq.displayName = 'proto.eosapi.EosMessageSignReq'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eosapi.EosMessageSignRes = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.eosapi.EosMessageSignRes, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eosapi.EosMessageSignRes.displayName = 'proto.eosapi.EosMessageSignRes'
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.eosapi.EosTxReq.repeatedFields_ = [2]

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.eosapi.EosTxReq.prototype.toObject = function (opt_includeInstance) {
    return proto.eosapi.EosTxReq.toObject(opt_includeInstance, this)
  }

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eosapi.EosTxReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.eosapi.EosTxReq.toObject = function (includeInstance, msg) {
    var f, obj = {
      path: jspb.Message.getFieldWithDefault(msg, 1, ''),
      signDatasList: jspb.Message.toObjectList(msg.getSignDatasList(),
        proto.eosapi.EosSignData.toObject, includeInstance)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eosapi.EosTxReq}
 */
proto.eosapi.EosTxReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.eosapi.EosTxReq()
  return proto.eosapi.EosTxReq.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eosapi.EosTxReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eosapi.EosTxReq}
 */
proto.eosapi.EosTxReq.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setPath(value)
        break
      case 2:
        var value = new proto.eosapi.EosSignData()
        reader.readMessage(value, proto.eosapi.EosSignData.deserializeBinaryFromReader)
        msg.addSignDatas(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eosapi.EosTxReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.eosapi.EosTxReq.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eosapi.EosTxReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eosapi.EosTxReq.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getPath()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
  f = message.getSignDatasList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.eosapi.EosSignData.serializeBinaryToWriter
    )
  }
}

/**
 * optional string path = 1;
 * @return {string}
 */
proto.eosapi.EosTxReq.prototype.getPath = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.eosapi.EosTxReq} returns this
 */
proto.eosapi.EosTxReq.prototype.setPath = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * repeated EosSignData sign_datas = 2;
 * @return {!Array<!proto.eosapi.EosSignData>}
 */
proto.eosapi.EosTxReq.prototype.getSignDatasList = function () {
  return /** @type{!Array<!proto.eosapi.EosSignData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.eosapi.EosSignData, 2))
}

/**
 * @param {!Array<!proto.eosapi.EosSignData>} value
 * @return {!proto.eosapi.EosTxReq} returns this
*/
proto.eosapi.EosTxReq.prototype.setSignDatasList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value)
}

/**
 * @param {!proto.eosapi.EosSignData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eosapi.EosSignData}
 */
proto.eosapi.EosTxReq.prototype.addSignDatas = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.eosapi.EosSignData, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eosapi.EosTxReq} returns this
 */
proto.eosapi.EosTxReq.prototype.clearSignDatasList = function () {
  return this.setSignDatasList([])
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.eosapi.EosSignData.repeatedFields_ = [2]

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.eosapi.EosSignData.prototype.toObject = function (opt_includeInstance) {
    return proto.eosapi.EosSignData.toObject(opt_includeInstance, this)
  }

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eosapi.EosSignData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.eosapi.EosSignData.toObject = function (includeInstance, msg) {
    var f, obj = {
      txData: jspb.Message.getFieldWithDefault(msg, 1, ''),
      pubKeysList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
      chainId: jspb.Message.getFieldWithDefault(msg, 3, ''),
      to: jspb.Message.getFieldWithDefault(msg, 4, ''),
      from: jspb.Message.getFieldWithDefault(msg, 5, ''),
      payment: jspb.Message.getFieldWithDefault(msg, 6, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eosapi.EosSignData}
 */
proto.eosapi.EosSignData.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.eosapi.EosSignData()
  return proto.eosapi.EosSignData.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eosapi.EosSignData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eosapi.EosSignData}
 */
proto.eosapi.EosSignData.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setTxData(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.addPubKeys(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setChainId(value)
        break
      case 4:
        var value = /** @type {string} */ (reader.readString())
        msg.setTo(value)
        break
      case 5:
        var value = /** @type {string} */ (reader.readString())
        msg.setFrom(value)
        break
      case 6:
        var value = /** @type {string} */ (reader.readString())
        msg.setPayment(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eosapi.EosSignData.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.eosapi.EosSignData.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eosapi.EosSignData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eosapi.EosSignData.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getTxData()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
  f = message.getPubKeysList()
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    )
  }
  f = message.getChainId()
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    )
  }
  f = message.getTo()
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    )
  }
  f = message.getFrom()
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    )
  }
  f = message.getPayment()
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    )
  }
}

/**
 * optional string tx_data = 1;
 * @return {string}
 */
proto.eosapi.EosSignData.prototype.getTxData = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.eosapi.EosSignData} returns this
 */
proto.eosapi.EosSignData.prototype.setTxData = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * repeated string pub_keys = 2;
 * @return {!Array<string>}
 */
proto.eosapi.EosSignData.prototype.getPubKeysList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2))
}

/**
 * @param {!Array<string>} value
 * @return {!proto.eosapi.EosSignData} returns this
 */
proto.eosapi.EosSignData.prototype.setPubKeysList = function (value) {
  return jspb.Message.setField(this, 2, value || [])
}

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.eosapi.EosSignData} returns this
 */
proto.eosapi.EosSignData.prototype.addPubKeys = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eosapi.EosSignData} returns this
 */
proto.eosapi.EosSignData.prototype.clearPubKeysList = function () {
  return this.setPubKeysList([])
}

/**
 * optional string chain_id = 3;
 * @return {string}
 */
proto.eosapi.EosSignData.prototype.getChainId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}

/**
 * @param {string} value
 * @return {!proto.eosapi.EosSignData} returns this
 */
proto.eosapi.EosSignData.prototype.setChainId = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value)
}

/**
 * optional string to = 4;
 * @return {string}
 */
proto.eosapi.EosSignData.prototype.getTo = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''))
}

/**
 * @param {string} value
 * @return {!proto.eosapi.EosSignData} returns this
 */
proto.eosapi.EosSignData.prototype.setTo = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value)
}

/**
 * optional string from = 5;
 * @return {string}
 */
proto.eosapi.EosSignData.prototype.getFrom = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''))
}

/**
 * @param {string} value
 * @return {!proto.eosapi.EosSignData} returns this
 */
proto.eosapi.EosSignData.prototype.setFrom = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value)
}

/**
 * optional string payment = 6;
 * @return {string}
 */
proto.eosapi.EosSignData.prototype.getPayment = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''))
}

/**
 * @param {string} value
 * @return {!proto.eosapi.EosSignData} returns this
 */
proto.eosapi.EosSignData.prototype.setPayment = function (value) {
  return jspb.Message.setProto3StringField(this, 6, value)
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.eosapi.EosTxRes.repeatedFields_ = [1]

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.eosapi.EosTxRes.prototype.toObject = function (opt_includeInstance) {
    return proto.eosapi.EosTxRes.toObject(opt_includeInstance, this)
  }

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eosapi.EosTxRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.eosapi.EosTxRes.toObject = function (includeInstance, msg) {
    var f, obj = {
      transMultiSignsList: jspb.Message.toObjectList(msg.getTransMultiSignsList(),
        proto.eosapi.EosSignResult.toObject, includeInstance)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eosapi.EosTxRes}
 */
proto.eosapi.EosTxRes.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.eosapi.EosTxRes()
  return proto.eosapi.EosTxRes.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eosapi.EosTxRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eosapi.EosTxRes}
 */
proto.eosapi.EosTxRes.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.eosapi.EosSignResult()
        reader.readMessage(value, proto.eosapi.EosSignResult.deserializeBinaryFromReader)
        msg.addTransMultiSigns(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eosapi.EosTxRes.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.eosapi.EosTxRes.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eosapi.EosTxRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eosapi.EosTxRes.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getTransMultiSignsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.eosapi.EosSignResult.serializeBinaryToWriter
    )
  }
}

/**
 * repeated EosSignResult trans_multi_signs = 1;
 * @return {!Array<!proto.eosapi.EosSignResult>}
 */
proto.eosapi.EosTxRes.prototype.getTransMultiSignsList = function () {
  return /** @type{!Array<!proto.eosapi.EosSignResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.eosapi.EosSignResult, 1))
}

/**
 * @param {!Array<!proto.eosapi.EosSignResult>} value
 * @return {!proto.eosapi.EosTxRes} returns this
*/
proto.eosapi.EosTxRes.prototype.setTransMultiSignsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value)
}

/**
 * @param {!proto.eosapi.EosSignResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eosapi.EosSignResult}
 */
proto.eosapi.EosTxRes.prototype.addTransMultiSigns = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.eosapi.EosSignResult, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eosapi.EosTxRes} returns this
 */
proto.eosapi.EosTxRes.prototype.clearTransMultiSignsList = function () {
  return this.setTransMultiSignsList([])
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.eosapi.EosSignResult.repeatedFields_ = [2]

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.eosapi.EosSignResult.prototype.toObject = function (opt_includeInstance) {
    return proto.eosapi.EosSignResult.toObject(opt_includeInstance, this)
  }

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eosapi.EosSignResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.eosapi.EosSignResult.toObject = function (includeInstance, msg) {
    var f, obj = {
      hash: jspb.Message.getFieldWithDefault(msg, 1, ''),
      signsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eosapi.EosSignResult}
 */
proto.eosapi.EosSignResult.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.eosapi.EosSignResult()
  return proto.eosapi.EosSignResult.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eosapi.EosSignResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eosapi.EosSignResult}
 */
proto.eosapi.EosSignResult.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setHash(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.addSigns(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eosapi.EosSignResult.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.eosapi.EosSignResult.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eosapi.EosSignResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eosapi.EosSignResult.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getHash()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
  f = message.getSignsList()
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    )
  }
}

/**
 * optional string hash = 1;
 * @return {string}
 */
proto.eosapi.EosSignResult.prototype.getHash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.eosapi.EosSignResult} returns this
 */
proto.eosapi.EosSignResult.prototype.setHash = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * repeated string signs = 2;
 * @return {!Array<string>}
 */
proto.eosapi.EosSignResult.prototype.getSignsList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2))
}

/**
 * @param {!Array<string>} value
 * @return {!proto.eosapi.EosSignResult} returns this
 */
proto.eosapi.EosSignResult.prototype.setSignsList = function (value) {
  return jspb.Message.setField(this, 2, value || [])
}

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.eosapi.EosSignResult} returns this
 */
proto.eosapi.EosSignResult.prototype.addSigns = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eosapi.EosSignResult} returns this
 */
proto.eosapi.EosSignResult.prototype.clearSignsList = function () {
  return this.setSignsList([])
}

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.eosapi.EosPubkeyReq.prototype.toObject = function (opt_includeInstance) {
    return proto.eosapi.EosPubkeyReq.toObject(opt_includeInstance, this)
  }

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eosapi.EosPubkeyReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.eosapi.EosPubkeyReq.toObject = function (includeInstance, msg) {
    var f, obj = {
      path: jspb.Message.getFieldWithDefault(msg, 1, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eosapi.EosPubkeyReq}
 */
proto.eosapi.EosPubkeyReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.eosapi.EosPubkeyReq()
  return proto.eosapi.EosPubkeyReq.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eosapi.EosPubkeyReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eosapi.EosPubkeyReq}
 */
proto.eosapi.EosPubkeyReq.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setPath(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eosapi.EosPubkeyReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.eosapi.EosPubkeyReq.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eosapi.EosPubkeyReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eosapi.EosPubkeyReq.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getPath()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
}

/**
 * optional string path = 1;
 * @return {string}
 */
proto.eosapi.EosPubkeyReq.prototype.getPath = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.eosapi.EosPubkeyReq} returns this
 */
proto.eosapi.EosPubkeyReq.prototype.setPath = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.eosapi.EosPubkeyRes.prototype.toObject = function (opt_includeInstance) {
    return proto.eosapi.EosPubkeyRes.toObject(opt_includeInstance, this)
  }

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eosapi.EosPubkeyRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.eosapi.EosPubkeyRes.toObject = function (includeInstance, msg) {
    var f, obj = {
      pubkey: jspb.Message.getFieldWithDefault(msg, 1, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eosapi.EosPubkeyRes}
 */
proto.eosapi.EosPubkeyRes.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.eosapi.EosPubkeyRes()
  return proto.eosapi.EosPubkeyRes.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eosapi.EosPubkeyRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eosapi.EosPubkeyRes}
 */
proto.eosapi.EosPubkeyRes.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setPubkey(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eosapi.EosPubkeyRes.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.eosapi.EosPubkeyRes.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eosapi.EosPubkeyRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eosapi.EosPubkeyRes.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getPubkey()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
}

/**
 * optional string pubkey = 1;
 * @return {string}
 */
proto.eosapi.EosPubkeyRes.prototype.getPubkey = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.eosapi.EosPubkeyRes} returns this
 */
proto.eosapi.EosPubkeyRes.prototype.setPubkey = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.eosapi.EosMessageSignReq.prototype.toObject = function (opt_includeInstance) {
    return proto.eosapi.EosMessageSignReq.toObject(opt_includeInstance, this)
  }

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eosapi.EosMessageSignReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.eosapi.EosMessageSignReq.toObject = function (includeInstance, msg) {
    var f, obj = {
      path: jspb.Message.getFieldWithDefault(msg, 1, ''),
      data: jspb.Message.getFieldWithDefault(msg, 2, ''),
      isHex: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
      pubkey: jspb.Message.getFieldWithDefault(msg, 4, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eosapi.EosMessageSignReq}
 */
proto.eosapi.EosMessageSignReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.eosapi.EosMessageSignReq()
  return proto.eosapi.EosMessageSignReq.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eosapi.EosMessageSignReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eosapi.EosMessageSignReq}
 */
proto.eosapi.EosMessageSignReq.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setPath(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setData(value)
        break
      case 3:
        var value = /** @type {boolean} */ (reader.readBool())
        msg.setIsHex(value)
        break
      case 4:
        var value = /** @type {string} */ (reader.readString())
        msg.setPubkey(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eosapi.EosMessageSignReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.eosapi.EosMessageSignReq.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eosapi.EosMessageSignReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eosapi.EosMessageSignReq.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getPath()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
  f = message.getData()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getIsHex()
  if (f) {
    writer.writeBool(
      3,
      f
    )
  }
  f = message.getPubkey()
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    )
  }
}

/**
 * optional string path = 1;
 * @return {string}
 */
proto.eosapi.EosMessageSignReq.prototype.getPath = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.eosapi.EosMessageSignReq} returns this
 */
proto.eosapi.EosMessageSignReq.prototype.setPath = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string data = 2;
 * @return {string}
 */
proto.eosapi.EosMessageSignReq.prototype.getData = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.eosapi.EosMessageSignReq} returns this
 */
proto.eosapi.EosMessageSignReq.prototype.setData = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional bool is_hex = 3;
 * @return {boolean}
 */
proto.eosapi.EosMessageSignReq.prototype.getIsHex = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false))
}

/**
 * @param {boolean} value
 * @return {!proto.eosapi.EosMessageSignReq} returns this
 */
proto.eosapi.EosMessageSignReq.prototype.setIsHex = function (value) {
  return jspb.Message.setProto3BooleanField(this, 3, value)
}

/**
 * optional string pubkey = 4;
 * @return {string}
 */
proto.eosapi.EosMessageSignReq.prototype.getPubkey = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''))
}

/**
 * @param {string} value
 * @return {!proto.eosapi.EosMessageSignReq} returns this
 */
proto.eosapi.EosMessageSignReq.prototype.setPubkey = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.eosapi.EosMessageSignRes.prototype.toObject = function (opt_includeInstance) {
    return proto.eosapi.EosMessageSignRes.toObject(opt_includeInstance, this)
  }

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eosapi.EosMessageSignRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.eosapi.EosMessageSignRes.toObject = function (includeInstance, msg) {
    var f, obj = {
      signature: jspb.Message.getFieldWithDefault(msg, 1, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eosapi.EosMessageSignRes}
 */
proto.eosapi.EosMessageSignRes.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.eosapi.EosMessageSignRes()
  return proto.eosapi.EosMessageSignRes.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eosapi.EosMessageSignRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eosapi.EosMessageSignRes}
 */
proto.eosapi.EosMessageSignRes.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setSignature(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eosapi.EosMessageSignRes.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.eosapi.EosMessageSignRes.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eosapi.EosMessageSignRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eosapi.EosMessageSignRes.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getSignature()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
}

/**
 * optional string signature = 1;
 * @return {string}
 */
proto.eosapi.EosMessageSignRes.prototype.getSignature = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.eosapi.EosMessageSignRes} returns this
 */
proto.eosapi.EosMessageSignRes.prototype.setSignature = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

goog.object.extend(exports, proto.eosapi)
